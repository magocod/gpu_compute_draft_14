/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const AMDGPU_CS_MAX_IBS_PER_SUBMIT: u32 = 4;
pub const AMDGPU_TIMEOUT_INFINITE: i32 = -1;
pub const AMDGPU_QUERY_FENCE_TIMEOUT_IS_ABSOLUTE: u32 = 1;
pub const AMDGPU_VA_RANGE_32_BIT: u32 = 1;
pub const AMDGPU_VA_RANGE_HIGH: u32 = 2;
pub const AMDGPU_VA_RANGE_REPLAYABLE: u32 = 4;
pub const __BITS_PER_LONG: u32 = 64;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const DRM_NAME: &[u8; 4] = b"drm\0";
pub const DRM_MIN_ORDER: u32 = 5;
pub const DRM_MAX_ORDER: u32 = 22;
pub const DRM_RAM_PERCENT: u32 = 10;
pub const _DRM_LOCK_HELD: u32 = 2147483648;
pub const _DRM_LOCK_CONT: u32 = 1073741824;
pub const _DRM_VBLANK_HIGH_CRTC_SHIFT: u32 = 1;
pub const _DRM_PRE_MODESET: u32 = 1;
pub const _DRM_POST_MODESET: u32 = 2;
pub const DRM_CAP_DUMB_BUFFER: u32 = 1;
pub const DRM_CAP_VBLANK_HIGH_CRTC: u32 = 2;
pub const DRM_CAP_DUMB_PREFERRED_DEPTH: u32 = 3;
pub const DRM_CAP_DUMB_PREFER_SHADOW: u32 = 4;
pub const DRM_CAP_PRIME: u32 = 5;
pub const DRM_PRIME_CAP_IMPORT: u32 = 1;
pub const DRM_PRIME_CAP_EXPORT: u32 = 2;
pub const DRM_CAP_TIMESTAMP_MONOTONIC: u32 = 6;
pub const DRM_CAP_ASYNC_PAGE_FLIP: u32 = 7;
pub const DRM_CAP_CURSOR_WIDTH: u32 = 8;
pub const DRM_CAP_CURSOR_HEIGHT: u32 = 9;
pub const DRM_CAP_ADDFB2_MODIFIERS: u32 = 16;
pub const DRM_CAP_PAGE_FLIP_TARGET: u32 = 17;
pub const DRM_CAP_CRTC_IN_VBLANK_EVENT: u32 = 18;
pub const DRM_CAP_SYNCOBJ: u32 = 19;
pub const DRM_CAP_SYNCOBJ_TIMELINE: u32 = 20;
pub const DRM_CLIENT_CAP_STEREO_3D: u32 = 1;
pub const DRM_CLIENT_CAP_UNIVERSAL_PLANES: u32 = 2;
pub const DRM_CLIENT_CAP_ATOMIC: u32 = 3;
pub const DRM_CLIENT_CAP_ASPECT_RATIO: u32 = 4;
pub const DRM_CLIENT_CAP_WRITEBACK_CONNECTORS: u32 = 5;
pub const DRM_SYNCOBJ_CREATE_SIGNALED: u32 = 1;
pub const DRM_SYNCOBJ_FD_TO_HANDLE_FLAGS_IMPORT_SYNC_FILE: u32 = 1;
pub const DRM_SYNCOBJ_HANDLE_TO_FD_FLAGS_EXPORT_SYNC_FILE: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT: u32 = 2;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE: u32 = 4;
pub const DRM_SYNCOBJ_QUERY_FLAGS_LAST_SUBMITTED: u32 = 1;
pub const DRM_CRTC_SEQUENCE_RELATIVE: u32 = 1;
pub const DRM_CRTC_SEQUENCE_NEXT_ON_MISS: u32 = 2;
pub const DRM_CONNECTOR_NAME_LEN: u32 = 32;
pub const DRM_DISPLAY_MODE_LEN: u32 = 32;
pub const DRM_PROP_NAME_LEN: u32 = 32;
pub const DRM_MODE_TYPE_BUILTIN: u32 = 1;
pub const DRM_MODE_TYPE_CLOCK_C: u32 = 3;
pub const DRM_MODE_TYPE_CRTC_C: u32 = 5;
pub const DRM_MODE_TYPE_PREFERRED: u32 = 8;
pub const DRM_MODE_TYPE_DEFAULT: u32 = 16;
pub const DRM_MODE_TYPE_USERDEF: u32 = 32;
pub const DRM_MODE_TYPE_DRIVER: u32 = 64;
pub const DRM_MODE_TYPE_ALL: u32 = 104;
pub const DRM_MODE_FLAG_PHSYNC: u32 = 1;
pub const DRM_MODE_FLAG_NHSYNC: u32 = 2;
pub const DRM_MODE_FLAG_PVSYNC: u32 = 4;
pub const DRM_MODE_FLAG_NVSYNC: u32 = 8;
pub const DRM_MODE_FLAG_INTERLACE: u32 = 16;
pub const DRM_MODE_FLAG_DBLSCAN: u32 = 32;
pub const DRM_MODE_FLAG_CSYNC: u32 = 64;
pub const DRM_MODE_FLAG_PCSYNC: u32 = 128;
pub const DRM_MODE_FLAG_NCSYNC: u32 = 256;
pub const DRM_MODE_FLAG_HSKEW: u32 = 512;
pub const DRM_MODE_FLAG_BCAST: u32 = 1024;
pub const DRM_MODE_FLAG_PIXMUX: u32 = 2048;
pub const DRM_MODE_FLAG_DBLCLK: u32 = 4096;
pub const DRM_MODE_FLAG_CLKDIV2: u32 = 8192;
pub const DRM_MODE_FLAG_3D_MASK: u32 = 507904;
pub const DRM_MODE_FLAG_3D_NONE: u32 = 0;
pub const DRM_MODE_FLAG_3D_FRAME_PACKING: u32 = 16384;
pub const DRM_MODE_FLAG_3D_FIELD_ALTERNATIVE: u32 = 32768;
pub const DRM_MODE_FLAG_3D_LINE_ALTERNATIVE: u32 = 49152;
pub const DRM_MODE_FLAG_3D_SIDE_BY_SIDE_FULL: u32 = 65536;
pub const DRM_MODE_FLAG_3D_L_DEPTH: u32 = 81920;
pub const DRM_MODE_FLAG_3D_L_DEPTH_GFX_GFX_DEPTH: u32 = 98304;
pub const DRM_MODE_FLAG_3D_TOP_AND_BOTTOM: u32 = 114688;
pub const DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF: u32 = 131072;
pub const DRM_MODE_PICTURE_ASPECT_NONE: u32 = 0;
pub const DRM_MODE_PICTURE_ASPECT_4_3: u32 = 1;
pub const DRM_MODE_PICTURE_ASPECT_16_9: u32 = 2;
pub const DRM_MODE_PICTURE_ASPECT_64_27: u32 = 3;
pub const DRM_MODE_PICTURE_ASPECT_256_135: u32 = 4;
pub const DRM_MODE_CONTENT_TYPE_NO_DATA: u32 = 0;
pub const DRM_MODE_CONTENT_TYPE_GRAPHICS: u32 = 1;
pub const DRM_MODE_CONTENT_TYPE_PHOTO: u32 = 2;
pub const DRM_MODE_CONTENT_TYPE_CINEMA: u32 = 3;
pub const DRM_MODE_CONTENT_TYPE_GAME: u32 = 4;
pub const DRM_MODE_FLAG_PIC_AR_MASK: u32 = 7864320;
pub const DRM_MODE_FLAG_PIC_AR_NONE: u32 = 0;
pub const DRM_MODE_FLAG_PIC_AR_4_3: u32 = 524288;
pub const DRM_MODE_FLAG_PIC_AR_16_9: u32 = 1048576;
pub const DRM_MODE_FLAG_PIC_AR_64_27: u32 = 1572864;
pub const DRM_MODE_FLAG_PIC_AR_256_135: u32 = 2097152;
pub const DRM_MODE_FLAG_ALL: u32 = 521215;
pub const DRM_MODE_DPMS_ON: u32 = 0;
pub const DRM_MODE_DPMS_STANDBY: u32 = 1;
pub const DRM_MODE_DPMS_SUSPEND: u32 = 2;
pub const DRM_MODE_DPMS_OFF: u32 = 3;
pub const DRM_MODE_SCALE_NONE: u32 = 0;
pub const DRM_MODE_SCALE_FULLSCREEN: u32 = 1;
pub const DRM_MODE_SCALE_CENTER: u32 = 2;
pub const DRM_MODE_SCALE_ASPECT: u32 = 3;
pub const DRM_MODE_DITHERING_OFF: u32 = 0;
pub const DRM_MODE_DITHERING_ON: u32 = 1;
pub const DRM_MODE_DITHERING_AUTO: u32 = 2;
pub const DRM_MODE_DIRTY_OFF: u32 = 0;
pub const DRM_MODE_DIRTY_ON: u32 = 1;
pub const DRM_MODE_DIRTY_ANNOTATE: u32 = 2;
pub const DRM_MODE_LINK_STATUS_GOOD: u32 = 0;
pub const DRM_MODE_LINK_STATUS_BAD: u32 = 1;
pub const DRM_MODE_ROTATE_0: u32 = 1;
pub const DRM_MODE_ROTATE_90: u32 = 2;
pub const DRM_MODE_ROTATE_180: u32 = 4;
pub const DRM_MODE_ROTATE_270: u32 = 8;
pub const DRM_MODE_ROTATE_MASK: u32 = 15;
pub const DRM_MODE_REFLECT_X: u32 = 16;
pub const DRM_MODE_REFLECT_Y: u32 = 32;
pub const DRM_MODE_REFLECT_MASK: u32 = 48;
pub const DRM_MODE_CONTENT_PROTECTION_UNDESIRED: u32 = 0;
pub const DRM_MODE_CONTENT_PROTECTION_DESIRED: u32 = 1;
pub const DRM_MODE_CONTENT_PROTECTION_ENABLED: u32 = 2;
pub const DRM_MODE_PRESENT_TOP_FIELD: u32 = 1;
pub const DRM_MODE_PRESENT_BOTTOM_FIELD: u32 = 2;
pub const DRM_MODE_ENCODER_NONE: u32 = 0;
pub const DRM_MODE_ENCODER_DAC: u32 = 1;
pub const DRM_MODE_ENCODER_TMDS: u32 = 2;
pub const DRM_MODE_ENCODER_LVDS: u32 = 3;
pub const DRM_MODE_ENCODER_TVDAC: u32 = 4;
pub const DRM_MODE_ENCODER_VIRTUAL: u32 = 5;
pub const DRM_MODE_ENCODER_DSI: u32 = 6;
pub const DRM_MODE_ENCODER_DPMST: u32 = 7;
pub const DRM_MODE_ENCODER_DPI: u32 = 8;
pub const DRM_MODE_CONNECTOR_Unknown: u32 = 0;
pub const DRM_MODE_CONNECTOR_VGA: u32 = 1;
pub const DRM_MODE_CONNECTOR_DVII: u32 = 2;
pub const DRM_MODE_CONNECTOR_DVID: u32 = 3;
pub const DRM_MODE_CONNECTOR_DVIA: u32 = 4;
pub const DRM_MODE_CONNECTOR_Composite: u32 = 5;
pub const DRM_MODE_CONNECTOR_SVIDEO: u32 = 6;
pub const DRM_MODE_CONNECTOR_LVDS: u32 = 7;
pub const DRM_MODE_CONNECTOR_Component: u32 = 8;
pub const DRM_MODE_CONNECTOR_9PinDIN: u32 = 9;
pub const DRM_MODE_CONNECTOR_DisplayPort: u32 = 10;
pub const DRM_MODE_CONNECTOR_HDMIA: u32 = 11;
pub const DRM_MODE_CONNECTOR_HDMIB: u32 = 12;
pub const DRM_MODE_CONNECTOR_TV: u32 = 13;
pub const DRM_MODE_CONNECTOR_eDP: u32 = 14;
pub const DRM_MODE_CONNECTOR_VIRTUAL: u32 = 15;
pub const DRM_MODE_CONNECTOR_DSI: u32 = 16;
pub const DRM_MODE_CONNECTOR_DPI: u32 = 17;
pub const DRM_MODE_CONNECTOR_WRITEBACK: u32 = 18;
pub const DRM_MODE_CONNECTOR_SPI: u32 = 19;
pub const DRM_MODE_CONNECTOR_USB: u32 = 20;
pub const DRM_MODE_PROP_PENDING: u32 = 1;
pub const DRM_MODE_PROP_RANGE: u32 = 2;
pub const DRM_MODE_PROP_IMMUTABLE: u32 = 4;
pub const DRM_MODE_PROP_ENUM: u32 = 8;
pub const DRM_MODE_PROP_BLOB: u32 = 16;
pub const DRM_MODE_PROP_BITMASK: u32 = 32;
pub const DRM_MODE_PROP_LEGACY_TYPE: u32 = 58;
pub const DRM_MODE_PROP_EXTENDED_TYPE: u32 = 65472;
pub const DRM_MODE_PROP_ATOMIC: u32 = 2147483648;
pub const DRM_MODE_OBJECT_CRTC: u32 = 3435973836;
pub const DRM_MODE_OBJECT_CONNECTOR: u32 = 3233857728;
pub const DRM_MODE_OBJECT_ENCODER: u32 = 3772834016;
pub const DRM_MODE_OBJECT_MODE: u32 = 3739147998;
pub const DRM_MODE_OBJECT_PROPERTY: u32 = 2964369584;
pub const DRM_MODE_OBJECT_FB: u32 = 4227595259;
pub const DRM_MODE_OBJECT_BLOB: u32 = 3149642683;
pub const DRM_MODE_OBJECT_PLANE: u32 = 4008636142;
pub const DRM_MODE_OBJECT_ANY: u32 = 0;
pub const DRM_MODE_FB_INTERLACED: u32 = 1;
pub const DRM_MODE_FB_MODIFIERS: u32 = 2;
pub const DRM_MODE_FB_DIRTY_ANNOTATE_COPY: u32 = 1;
pub const DRM_MODE_FB_DIRTY_ANNOTATE_FILL: u32 = 2;
pub const DRM_MODE_FB_DIRTY_FLAGS: u32 = 3;
pub const DRM_MODE_FB_DIRTY_MAX_CLIPS: u32 = 256;
pub const DRM_MODE_CURSOR_BO: u32 = 1;
pub const DRM_MODE_CURSOR_MOVE: u32 = 2;
pub const DRM_MODE_CURSOR_FLAGS: u32 = 3;
pub const DRM_MODE_PAGE_FLIP_EVENT: u32 = 1;
pub const DRM_MODE_PAGE_FLIP_ASYNC: u32 = 2;
pub const DRM_MODE_PAGE_FLIP_TARGET_ABSOLUTE: u32 = 4;
pub const DRM_MODE_PAGE_FLIP_TARGET_RELATIVE: u32 = 8;
pub const DRM_MODE_PAGE_FLIP_TARGET: u32 = 12;
pub const DRM_MODE_PAGE_FLIP_FLAGS: u32 = 15;
pub const DRM_MODE_ATOMIC_TEST_ONLY: u32 = 256;
pub const DRM_MODE_ATOMIC_NONBLOCK: u32 = 512;
pub const DRM_MODE_ATOMIC_ALLOW_MODESET: u32 = 1024;
pub const DRM_MODE_ATOMIC_FLAGS: u32 = 1795;
pub const FORMAT_BLOB_CURRENT: u32 = 1;
pub const DRM_IOCTL_BASE: u8 = 100u8;
pub const DRM_COMMAND_BASE: u32 = 64;
pub const DRM_COMMAND_END: u32 = 160;
pub const DRM_EVENT_VBLANK: u32 = 1;
pub const DRM_EVENT_FLIP_COMPLETE: u32 = 2;
pub const DRM_EVENT_CRTC_SEQUENCE: u32 = 3;
pub const DRM_AMDGPU_GEM_CREATE: u32 = 0;
pub const DRM_AMDGPU_GEM_MMAP: u32 = 1;
pub const DRM_AMDGPU_CTX: u32 = 2;
pub const DRM_AMDGPU_BO_LIST: u32 = 3;
pub const DRM_AMDGPU_CS: u32 = 4;
pub const DRM_AMDGPU_INFO: u32 = 5;
pub const DRM_AMDGPU_GEM_METADATA: u32 = 6;
pub const DRM_AMDGPU_GEM_WAIT_IDLE: u32 = 7;
pub const DRM_AMDGPU_GEM_VA: u32 = 8;
pub const DRM_AMDGPU_WAIT_CS: u32 = 9;
pub const DRM_AMDGPU_GEM_OP: u32 = 16;
pub const DRM_AMDGPU_GEM_USERPTR: u32 = 17;
pub const DRM_AMDGPU_WAIT_FENCES: u32 = 18;
pub const DRM_AMDGPU_VM: u32 = 19;
pub const DRM_AMDGPU_FENCE_TO_HANDLE: u32 = 20;
pub const DRM_AMDGPU_SCHED: u32 = 21;
pub const AMDGPU_GEM_DOMAIN_CPU: u32 = 1;
pub const AMDGPU_GEM_DOMAIN_GTT: u32 = 2;
pub const AMDGPU_GEM_DOMAIN_VRAM: u32 = 4;
pub const AMDGPU_GEM_DOMAIN_GDS: u32 = 8;
pub const AMDGPU_GEM_DOMAIN_GWS: u32 = 16;
pub const AMDGPU_GEM_DOMAIN_OA: u32 = 32;
pub const AMDGPU_GEM_DOMAIN_MASK: u32 = 63;
pub const AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED: u32 = 1;
pub const AMDGPU_GEM_CREATE_NO_CPU_ACCESS: u32 = 2;
pub const AMDGPU_GEM_CREATE_CPU_GTT_USWC: u32 = 4;
pub const AMDGPU_GEM_CREATE_VRAM_CLEARED: u32 = 8;
pub const AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS: u32 = 32;
pub const AMDGPU_GEM_CREATE_VM_ALWAYS_VALID: u32 = 64;
pub const AMDGPU_GEM_CREATE_EXPLICIT_SYNC: u32 = 128;
pub const AMDGPU_GEM_CREATE_CP_MQD_GFX9: u32 = 256;
pub const AMDGPU_GEM_CREATE_VRAM_WIPE_ON_RELEASE: u32 = 512;
pub const AMDGPU_GEM_CREATE_ENCRYPTED: u32 = 1024;
pub const AMDGPU_GEM_CREATE_PREEMPTIBLE: u32 = 2048;
pub const AMDGPU_BO_LIST_OP_CREATE: u32 = 0;
pub const AMDGPU_BO_LIST_OP_DESTROY: u32 = 1;
pub const AMDGPU_BO_LIST_OP_UPDATE: u32 = 2;
pub const AMDGPU_CTX_OP_ALLOC_CTX: u32 = 1;
pub const AMDGPU_CTX_OP_FREE_CTX: u32 = 2;
pub const AMDGPU_CTX_OP_QUERY_STATE: u32 = 3;
pub const AMDGPU_CTX_OP_QUERY_STATE2: u32 = 4;
pub const AMDGPU_CTX_OP_GET_STABLE_PSTATE: u32 = 5;
pub const AMDGPU_CTX_OP_SET_STABLE_PSTATE: u32 = 6;
pub const AMDGPU_CTX_NO_RESET: u32 = 0;
pub const AMDGPU_CTX_GUILTY_RESET: u32 = 1;
pub const AMDGPU_CTX_INNOCENT_RESET: u32 = 2;
pub const AMDGPU_CTX_UNKNOWN_RESET: u32 = 3;
pub const AMDGPU_CTX_QUERY2_FLAGS_RESET: u32 = 1;
pub const AMDGPU_CTX_QUERY2_FLAGS_VRAMLOST: u32 = 2;
pub const AMDGPU_CTX_QUERY2_FLAGS_GUILTY: u32 = 4;
pub const AMDGPU_CTX_QUERY2_FLAGS_RAS_CE: u32 = 8;
pub const AMDGPU_CTX_QUERY2_FLAGS_RAS_UE: u32 = 16;
pub const AMDGPU_CTX_PRIORITY_UNSET: i32 = -2048;
pub const AMDGPU_CTX_PRIORITY_VERY_LOW: i32 = -1023;
pub const AMDGPU_CTX_PRIORITY_LOW: i32 = -512;
pub const AMDGPU_CTX_PRIORITY_NORMAL: u32 = 0;
pub const AMDGPU_CTX_PRIORITY_HIGH: u32 = 512;
pub const AMDGPU_CTX_PRIORITY_VERY_HIGH: u32 = 1023;
pub const AMDGPU_CTX_STABLE_PSTATE_FLAGS_MASK: u32 = 15;
pub const AMDGPU_CTX_STABLE_PSTATE_NONE: u32 = 0;
pub const AMDGPU_CTX_STABLE_PSTATE_STANDARD: u32 = 1;
pub const AMDGPU_CTX_STABLE_PSTATE_MIN_SCLK: u32 = 2;
pub const AMDGPU_CTX_STABLE_PSTATE_MIN_MCLK: u32 = 3;
pub const AMDGPU_CTX_STABLE_PSTATE_PEAK: u32 = 4;
pub const AMDGPU_VM_OP_RESERVE_VMID: u32 = 1;
pub const AMDGPU_VM_OP_UNRESERVE_VMID: u32 = 2;
pub const AMDGPU_SCHED_OP_PROCESS_PRIORITY_OVERRIDE: u32 = 1;
pub const AMDGPU_SCHED_OP_CONTEXT_PRIORITY_OVERRIDE: u32 = 2;
pub const AMDGPU_GEM_USERPTR_READONLY: u32 = 1;
pub const AMDGPU_GEM_USERPTR_ANONONLY: u32 = 2;
pub const AMDGPU_GEM_USERPTR_VALIDATE: u32 = 4;
pub const AMDGPU_GEM_USERPTR_REGISTER: u32 = 8;
pub const AMDGPU_TILING_ARRAY_MODE_SHIFT: u32 = 0;
pub const AMDGPU_TILING_ARRAY_MODE_MASK: u32 = 15;
pub const AMDGPU_TILING_PIPE_CONFIG_SHIFT: u32 = 4;
pub const AMDGPU_TILING_PIPE_CONFIG_MASK: u32 = 31;
pub const AMDGPU_TILING_TILE_SPLIT_SHIFT: u32 = 9;
pub const AMDGPU_TILING_TILE_SPLIT_MASK: u32 = 7;
pub const AMDGPU_TILING_MICRO_TILE_MODE_SHIFT: u32 = 12;
pub const AMDGPU_TILING_MICRO_TILE_MODE_MASK: u32 = 7;
pub const AMDGPU_TILING_BANK_WIDTH_SHIFT: u32 = 15;
pub const AMDGPU_TILING_BANK_WIDTH_MASK: u32 = 3;
pub const AMDGPU_TILING_BANK_HEIGHT_SHIFT: u32 = 17;
pub const AMDGPU_TILING_BANK_HEIGHT_MASK: u32 = 3;
pub const AMDGPU_TILING_MACRO_TILE_ASPECT_SHIFT: u32 = 19;
pub const AMDGPU_TILING_MACRO_TILE_ASPECT_MASK: u32 = 3;
pub const AMDGPU_TILING_NUM_BANKS_SHIFT: u32 = 21;
pub const AMDGPU_TILING_NUM_BANKS_MASK: u32 = 3;
pub const AMDGPU_TILING_SWIZZLE_MODE_SHIFT: u32 = 0;
pub const AMDGPU_TILING_SWIZZLE_MODE_MASK: u32 = 31;
pub const AMDGPU_TILING_DCC_OFFSET_256B_SHIFT: u32 = 5;
pub const AMDGPU_TILING_DCC_OFFSET_256B_MASK: u32 = 16777215;
pub const AMDGPU_TILING_DCC_PITCH_MAX_SHIFT: u32 = 29;
pub const AMDGPU_TILING_DCC_PITCH_MAX_MASK: u32 = 16383;
pub const AMDGPU_TILING_DCC_INDEPENDENT_64B_SHIFT: u32 = 43;
pub const AMDGPU_TILING_DCC_INDEPENDENT_64B_MASK: u32 = 1;
pub const AMDGPU_TILING_DCC_INDEPENDENT_128B_SHIFT: u32 = 44;
pub const AMDGPU_TILING_DCC_INDEPENDENT_128B_MASK: u32 = 1;
pub const AMDGPU_TILING_SCANOUT_SHIFT: u32 = 63;
pub const AMDGPU_TILING_SCANOUT_MASK: u32 = 1;
pub const AMDGPU_GEM_METADATA_OP_SET_METADATA: u32 = 1;
pub const AMDGPU_GEM_METADATA_OP_GET_METADATA: u32 = 2;
pub const AMDGPU_GEM_OP_GET_GEM_CREATE_INFO: u32 = 0;
pub const AMDGPU_GEM_OP_SET_PLACEMENT: u32 = 1;
pub const AMDGPU_VA_OP_MAP: u32 = 1;
pub const AMDGPU_VA_OP_UNMAP: u32 = 2;
pub const AMDGPU_VA_OP_CLEAR: u32 = 3;
pub const AMDGPU_VA_OP_REPLACE: u32 = 4;
pub const AMDGPU_VM_DELAY_UPDATE: u32 = 1;
pub const AMDGPU_VM_PAGE_READABLE: u32 = 2;
pub const AMDGPU_VM_PAGE_WRITEABLE: u32 = 4;
pub const AMDGPU_VM_PAGE_EXECUTABLE: u32 = 8;
pub const AMDGPU_VM_PAGE_PRT: u32 = 16;
pub const AMDGPU_VM_MTYPE_MASK: u32 = 480;
pub const AMDGPU_VM_MTYPE_DEFAULT: u32 = 0;
pub const AMDGPU_VM_MTYPE_NC: u32 = 32;
pub const AMDGPU_VM_MTYPE_WC: u32 = 64;
pub const AMDGPU_VM_MTYPE_CC: u32 = 96;
pub const AMDGPU_VM_MTYPE_UC: u32 = 128;
pub const AMDGPU_VM_MTYPE_RW: u32 = 160;
pub const AMDGPU_HW_IP_GFX: u32 = 0;
pub const AMDGPU_HW_IP_COMPUTE: u32 = 1;
pub const AMDGPU_HW_IP_DMA: u32 = 2;
pub const AMDGPU_HW_IP_UVD: u32 = 3;
pub const AMDGPU_HW_IP_VCE: u32 = 4;
pub const AMDGPU_HW_IP_UVD_ENC: u32 = 5;
pub const AMDGPU_HW_IP_VCN_DEC: u32 = 6;
pub const AMDGPU_HW_IP_VCN_ENC: u32 = 7;
pub const AMDGPU_HW_IP_VCN_JPEG: u32 = 8;
pub const AMDGPU_HW_IP_NUM: u32 = 9;
pub const AMDGPU_HW_IP_INSTANCE_MAX_COUNT: u32 = 1;
pub const AMDGPU_CHUNK_ID_IB: u32 = 1;
pub const AMDGPU_CHUNK_ID_FENCE: u32 = 2;
pub const AMDGPU_CHUNK_ID_DEPENDENCIES: u32 = 3;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_IN: u32 = 4;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_OUT: u32 = 5;
pub const AMDGPU_CHUNK_ID_BO_HANDLES: u32 = 6;
pub const AMDGPU_CHUNK_ID_SCHEDULED_DEPENDENCIES: u32 = 7;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_WAIT: u32 = 8;
pub const AMDGPU_CHUNK_ID_SYNCOBJ_TIMELINE_SIGNAL: u32 = 9;
pub const AMDGPU_IB_FLAG_CE: u32 = 1;
pub const AMDGPU_IB_FLAG_PREAMBLE: u32 = 2;
pub const AMDGPU_IB_FLAG_PREEMPT: u32 = 4;
pub const AMDGPU_IB_FLAG_TC_WB_NOT_INVALIDATE: u32 = 8;
pub const AMDGPU_IB_FLAG_RESET_GDS_MAX_WAVE_ID: u32 = 16;
pub const AMDGPU_IB_FLAGS_SECURE: u32 = 32;
pub const AMDGPU_IB_FLAG_EMIT_MEM_SYNC: u32 = 64;
pub const AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ: u32 = 0;
pub const AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ_FD: u32 = 1;
pub const AMDGPU_FENCE_TO_HANDLE_GET_SYNC_FILE_FD: u32 = 2;
pub const AMDGPU_IDS_FLAGS_FUSION: u32 = 1;
pub const AMDGPU_IDS_FLAGS_PREEMPTION: u32 = 2;
pub const AMDGPU_IDS_FLAGS_TMZ: u32 = 4;
pub const AMDGPU_INFO_ACCEL_WORKING: u32 = 0;
pub const AMDGPU_INFO_CRTC_FROM_ID: u32 = 1;
pub const AMDGPU_INFO_HW_IP_INFO: u32 = 2;
pub const AMDGPU_INFO_HW_IP_COUNT: u32 = 3;
pub const AMDGPU_INFO_TIMESTAMP: u32 = 5;
pub const AMDGPU_INFO_FW_VERSION: u32 = 14;
pub const AMDGPU_INFO_FW_VCE: u32 = 1;
pub const AMDGPU_INFO_FW_UVD: u32 = 2;
pub const AMDGPU_INFO_FW_GMC: u32 = 3;
pub const AMDGPU_INFO_FW_GFX_ME: u32 = 4;
pub const AMDGPU_INFO_FW_GFX_PFP: u32 = 5;
pub const AMDGPU_INFO_FW_GFX_CE: u32 = 6;
pub const AMDGPU_INFO_FW_GFX_RLC: u32 = 7;
pub const AMDGPU_INFO_FW_GFX_MEC: u32 = 8;
pub const AMDGPU_INFO_FW_SMC: u32 = 10;
pub const AMDGPU_INFO_FW_SDMA: u32 = 11;
pub const AMDGPU_INFO_FW_SOS: u32 = 12;
pub const AMDGPU_INFO_FW_ASD: u32 = 13;
pub const AMDGPU_INFO_FW_VCN: u32 = 14;
pub const AMDGPU_INFO_FW_GFX_RLC_RESTORE_LIST_CNTL: u32 = 15;
pub const AMDGPU_INFO_FW_GFX_RLC_RESTORE_LIST_GPM_MEM: u32 = 16;
pub const AMDGPU_INFO_FW_GFX_RLC_RESTORE_LIST_SRM_MEM: u32 = 17;
pub const AMDGPU_INFO_FW_DMCU: u32 = 18;
pub const AMDGPU_INFO_FW_TA: u32 = 19;
pub const AMDGPU_INFO_FW_DMCUB: u32 = 20;
pub const AMDGPU_INFO_FW_TOC: u32 = 21;
pub const AMDGPU_INFO_NUM_BYTES_MOVED: u32 = 15;
pub const AMDGPU_INFO_VRAM_USAGE: u32 = 16;
pub const AMDGPU_INFO_GTT_USAGE: u32 = 17;
pub const AMDGPU_INFO_GDS_CONFIG: u32 = 19;
pub const AMDGPU_INFO_VRAM_GTT: u32 = 20;
pub const AMDGPU_INFO_READ_MMR_REG: u32 = 21;
pub const AMDGPU_INFO_DEV_INFO: u32 = 22;
pub const AMDGPU_INFO_VIS_VRAM_USAGE: u32 = 23;
pub const AMDGPU_INFO_NUM_EVICTIONS: u32 = 24;
pub const AMDGPU_INFO_MEMORY: u32 = 25;
pub const AMDGPU_INFO_VCE_CLOCK_TABLE: u32 = 26;
pub const AMDGPU_INFO_VBIOS: u32 = 27;
pub const AMDGPU_INFO_VBIOS_SIZE: u32 = 1;
pub const AMDGPU_INFO_VBIOS_IMAGE: u32 = 2;
pub const AMDGPU_INFO_VBIOS_INFO: u32 = 3;
pub const AMDGPU_INFO_NUM_HANDLES: u32 = 28;
pub const AMDGPU_INFO_SENSOR: u32 = 29;
pub const AMDGPU_INFO_SENSOR_GFX_SCLK: u32 = 1;
pub const AMDGPU_INFO_SENSOR_GFX_MCLK: u32 = 2;
pub const AMDGPU_INFO_SENSOR_GPU_TEMP: u32 = 3;
pub const AMDGPU_INFO_SENSOR_GPU_LOAD: u32 = 4;
pub const AMDGPU_INFO_SENSOR_GPU_AVG_POWER: u32 = 5;
pub const AMDGPU_INFO_SENSOR_VDDNB: u32 = 6;
pub const AMDGPU_INFO_SENSOR_VDDGFX: u32 = 7;
pub const AMDGPU_INFO_SENSOR_STABLE_PSTATE_GFX_SCLK: u32 = 8;
pub const AMDGPU_INFO_SENSOR_STABLE_PSTATE_GFX_MCLK: u32 = 9;
pub const AMDGPU_INFO_NUM_VRAM_CPU_PAGE_FAULTS: u32 = 30;
pub const AMDGPU_INFO_VRAM_LOST_COUNTER: u32 = 31;
pub const AMDGPU_INFO_RAS_ENABLED_FEATURES: u32 = 32;
pub const AMDGPU_INFO_RAS_ENABLED_UMC: u32 = 1;
pub const AMDGPU_INFO_RAS_ENABLED_SDMA: u32 = 2;
pub const AMDGPU_INFO_RAS_ENABLED_GFX: u32 = 4;
pub const AMDGPU_INFO_RAS_ENABLED_MMHUB: u32 = 8;
pub const AMDGPU_INFO_RAS_ENABLED_ATHUB: u32 = 16;
pub const AMDGPU_INFO_RAS_ENABLED_PCIE: u32 = 32;
pub const AMDGPU_INFO_RAS_ENABLED_HDP: u32 = 64;
pub const AMDGPU_INFO_RAS_ENABLED_XGMI: u32 = 128;
pub const AMDGPU_INFO_RAS_ENABLED_DF: u32 = 256;
pub const AMDGPU_INFO_RAS_ENABLED_SMN: u32 = 512;
pub const AMDGPU_INFO_RAS_ENABLED_SEM: u32 = 1024;
pub const AMDGPU_INFO_RAS_ENABLED_MP0: u32 = 2048;
pub const AMDGPU_INFO_RAS_ENABLED_MP1: u32 = 4096;
pub const AMDGPU_INFO_RAS_ENABLED_FUSE: u32 = 8192;
pub const AMDGPU_INFO_VIDEO_CAPS: u32 = 33;
pub const AMDGPU_INFO_VIDEO_CAPS_DECODE: u32 = 0;
pub const AMDGPU_INFO_VIDEO_CAPS_ENCODE: u32 = 1;
pub const AMDGPU_INFO_MMR_SE_INDEX_SHIFT: u32 = 0;
pub const AMDGPU_INFO_MMR_SE_INDEX_MASK: u32 = 255;
pub const AMDGPU_INFO_MMR_SH_INDEX_SHIFT: u32 = 8;
pub const AMDGPU_INFO_MMR_SH_INDEX_MASK: u32 = 255;
pub const AMDGPU_VRAM_TYPE_UNKNOWN: u32 = 0;
pub const AMDGPU_VRAM_TYPE_GDDR1: u32 = 1;
pub const AMDGPU_VRAM_TYPE_DDR2: u32 = 2;
pub const AMDGPU_VRAM_TYPE_GDDR3: u32 = 3;
pub const AMDGPU_VRAM_TYPE_GDDR4: u32 = 4;
pub const AMDGPU_VRAM_TYPE_GDDR5: u32 = 5;
pub const AMDGPU_VRAM_TYPE_HBM: u32 = 6;
pub const AMDGPU_VRAM_TYPE_DDR3: u32 = 7;
pub const AMDGPU_VRAM_TYPE_DDR4: u32 = 8;
pub const AMDGPU_VRAM_TYPE_GDDR6: u32 = 9;
pub const AMDGPU_VRAM_TYPE_DDR5: u32 = 10;
pub const AMDGPU_VCE_CLOCK_TABLE_ENTRIES: u32 = 6;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG2: u32 = 0;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4: u32 = 1;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VC1: u32 = 2;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_MPEG4_AVC: u32 = 3;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_HEVC: u32 = 4;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_JPEG: u32 = 5;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_VP9: u32 = 6;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_AV1: u32 = 7;
pub const AMDGPU_INFO_VIDEO_CAPS_CODEC_IDX_COUNT: u32 = 8;
pub const AMDGPU_FAMILY_UNKNOWN: u32 = 0;
pub const AMDGPU_FAMILY_SI: u32 = 110;
pub const AMDGPU_FAMILY_CI: u32 = 120;
pub const AMDGPU_FAMILY_KV: u32 = 125;
pub const AMDGPU_FAMILY_VI: u32 = 130;
pub const AMDGPU_FAMILY_CZ: u32 = 135;
pub const AMDGPU_FAMILY_AI: u32 = 141;
pub const AMDGPU_FAMILY_RV: u32 = 142;
pub const AMDGPU_FAMILY_NV: u32 = 143;
pub const AMDGPU_FAMILY_VGH: u32 = 144;
pub const AMDGPU_FAMILY_YC: u32 = 146;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_gem_flink_name: amdgpu_bo_handle_type = 0;
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_kms: amdgpu_bo_handle_type = 1;
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_dma_buf_fd: amdgpu_bo_handle_type = 2;
pub const amdgpu_bo_handle_type_amdgpu_bo_handle_type_kms_noimport: amdgpu_bo_handle_type = 3;
pub type amdgpu_bo_handle_type = ::std::os::raw::c_uint;
pub const amdgpu_gpu_va_range_amdgpu_gpu_va_range_general: amdgpu_gpu_va_range = 0;
pub type amdgpu_gpu_va_range = ::std::os::raw::c_uint;
pub const amdgpu_sw_info_amdgpu_sw_info_address32_hi: amdgpu_sw_info = 0;
pub type amdgpu_sw_info = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_device {
    pub _unused: [u8; 0],
}
pub type amdgpu_device_handle = *mut amdgpu_device;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_context {
    _unused: [u8; 0],
}
pub type amdgpu_context_handle = *mut amdgpu_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo {
    _unused: [u8; 0],
}
pub type amdgpu_bo_handle = *mut amdgpu_bo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_list {
    _unused: [u8; 0],
}
pub type amdgpu_bo_list_handle = *mut amdgpu_bo_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_va {
    _unused: [u8; 0],
}
pub type amdgpu_va_handle = *mut amdgpu_va;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_semaphore {
    _unused: [u8; 0],
}
pub type amdgpu_semaphore_handle = *mut amdgpu_semaphore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_alloc_request {
    pub alloc_size: u64,
    pub phys_alignment: u64,
    pub preferred_heap: u32,
    pub flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_bo_alloc_request"][::std::mem::size_of::<amdgpu_bo_alloc_request>() - 32usize];
    ["Alignment of amdgpu_bo_alloc_request"]
        [::std::mem::align_of::<amdgpu_bo_alloc_request>() - 8usize];
    ["Offset of field: amdgpu_bo_alloc_request::alloc_size"]
        [::std::mem::offset_of!(amdgpu_bo_alloc_request, alloc_size) - 0usize];
    ["Offset of field: amdgpu_bo_alloc_request::phys_alignment"]
        [::std::mem::offset_of!(amdgpu_bo_alloc_request, phys_alignment) - 8usize];
    ["Offset of field: amdgpu_bo_alloc_request::preferred_heap"]
        [::std::mem::offset_of!(amdgpu_bo_alloc_request, preferred_heap) - 16usize];
    ["Offset of field: amdgpu_bo_alloc_request::flags"]
        [::std::mem::offset_of!(amdgpu_bo_alloc_request, flags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_metadata {
    pub flags: u64,
    pub tiling_info: u64,
    pub size_metadata: u32,
    pub umd_metadata: [u32; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_bo_metadata"][::std::mem::size_of::<amdgpu_bo_metadata>() - 280usize];
    ["Alignment of amdgpu_bo_metadata"][::std::mem::align_of::<amdgpu_bo_metadata>() - 8usize];
    ["Offset of field: amdgpu_bo_metadata::flags"]
        [::std::mem::offset_of!(amdgpu_bo_metadata, flags) - 0usize];
    ["Offset of field: amdgpu_bo_metadata::tiling_info"]
        [::std::mem::offset_of!(amdgpu_bo_metadata, tiling_info) - 8usize];
    ["Offset of field: amdgpu_bo_metadata::size_metadata"]
        [::std::mem::offset_of!(amdgpu_bo_metadata, size_metadata) - 16usize];
    ["Offset of field: amdgpu_bo_metadata::umd_metadata"]
        [::std::mem::offset_of!(amdgpu_bo_metadata, umd_metadata) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_info {
    pub alloc_size: u64,
    pub phys_alignment: u64,
    pub preferred_heap: u32,
    pub alloc_flags: u64,
    pub metadata: amdgpu_bo_metadata,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_bo_info"][::std::mem::size_of::<amdgpu_bo_info>() - 312usize];
    ["Alignment of amdgpu_bo_info"][::std::mem::align_of::<amdgpu_bo_info>() - 8usize];
    ["Offset of field: amdgpu_bo_info::alloc_size"]
        [::std::mem::offset_of!(amdgpu_bo_info, alloc_size) - 0usize];
    ["Offset of field: amdgpu_bo_info::phys_alignment"]
        [::std::mem::offset_of!(amdgpu_bo_info, phys_alignment) - 8usize];
    ["Offset of field: amdgpu_bo_info::preferred_heap"]
        [::std::mem::offset_of!(amdgpu_bo_info, preferred_heap) - 16usize];
    ["Offset of field: amdgpu_bo_info::alloc_flags"]
        [::std::mem::offset_of!(amdgpu_bo_info, alloc_flags) - 24usize];
    ["Offset of field: amdgpu_bo_info::metadata"]
        [::std::mem::offset_of!(amdgpu_bo_info, metadata) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_bo_import_result {
    pub buf_handle: amdgpu_bo_handle,
    pub alloc_size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_bo_import_result"][::std::mem::size_of::<amdgpu_bo_import_result>() - 16usize];
    ["Alignment of amdgpu_bo_import_result"]
        [::std::mem::align_of::<amdgpu_bo_import_result>() - 8usize];
    ["Offset of field: amdgpu_bo_import_result::buf_handle"]
        [::std::mem::offset_of!(amdgpu_bo_import_result, buf_handle) - 0usize];
    ["Offset of field: amdgpu_bo_import_result::alloc_size"]
        [::std::mem::offset_of!(amdgpu_bo_import_result, alloc_size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_gds_resource_info {
    pub gds_gfx_partition_size: u32,
    pub compute_partition_size: u32,
    pub gds_total_size: u32,
    pub gws_per_gfx_partition: u32,
    pub gws_per_compute_partition: u32,
    pub oa_per_gfx_partition: u32,
    pub oa_per_compute_partition: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_gds_resource_info"]
        [::std::mem::size_of::<amdgpu_gds_resource_info>() - 28usize];
    ["Alignment of amdgpu_gds_resource_info"]
        [::std::mem::align_of::<amdgpu_gds_resource_info>() - 4usize];
    ["Offset of field: amdgpu_gds_resource_info::gds_gfx_partition_size"]
        [::std::mem::offset_of!(amdgpu_gds_resource_info, gds_gfx_partition_size) - 0usize];
    ["Offset of field: amdgpu_gds_resource_info::compute_partition_size"]
        [::std::mem::offset_of!(amdgpu_gds_resource_info, compute_partition_size) - 4usize];
    ["Offset of field: amdgpu_gds_resource_info::gds_total_size"]
        [::std::mem::offset_of!(amdgpu_gds_resource_info, gds_total_size) - 8usize];
    ["Offset of field: amdgpu_gds_resource_info::gws_per_gfx_partition"]
        [::std::mem::offset_of!(amdgpu_gds_resource_info, gws_per_gfx_partition) - 12usize];
    ["Offset of field: amdgpu_gds_resource_info::gws_per_compute_partition"]
        [::std::mem::offset_of!(amdgpu_gds_resource_info, gws_per_compute_partition) - 16usize];
    ["Offset of field: amdgpu_gds_resource_info::oa_per_gfx_partition"]
        [::std::mem::offset_of!(amdgpu_gds_resource_info, oa_per_gfx_partition) - 20usize];
    ["Offset of field: amdgpu_gds_resource_info::oa_per_compute_partition"]
        [::std::mem::offset_of!(amdgpu_gds_resource_info, oa_per_compute_partition) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_fence {
    pub context: amdgpu_context_handle,
    pub ip_type: u32,
    pub ip_instance: u32,
    pub ring: u32,
    pub fence: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_cs_fence"][::std::mem::size_of::<amdgpu_cs_fence>() - 32usize];
    ["Alignment of amdgpu_cs_fence"][::std::mem::align_of::<amdgpu_cs_fence>() - 8usize];
    ["Offset of field: amdgpu_cs_fence::context"]
        [::std::mem::offset_of!(amdgpu_cs_fence, context) - 0usize];
    ["Offset of field: amdgpu_cs_fence::ip_type"]
        [::std::mem::offset_of!(amdgpu_cs_fence, ip_type) - 8usize];
    ["Offset of field: amdgpu_cs_fence::ip_instance"]
        [::std::mem::offset_of!(amdgpu_cs_fence, ip_instance) - 12usize];
    ["Offset of field: amdgpu_cs_fence::ring"]
        [::std::mem::offset_of!(amdgpu_cs_fence, ring) - 16usize];
    ["Offset of field: amdgpu_cs_fence::fence"]
        [::std::mem::offset_of!(amdgpu_cs_fence, fence) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_ib_info {
    pub flags: u64,
    pub ib_mc_address: u64,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_cs_ib_info"][::std::mem::size_of::<amdgpu_cs_ib_info>() - 24usize];
    ["Alignment of amdgpu_cs_ib_info"][::std::mem::align_of::<amdgpu_cs_ib_info>() - 8usize];
    ["Offset of field: amdgpu_cs_ib_info::flags"]
        [::std::mem::offset_of!(amdgpu_cs_ib_info, flags) - 0usize];
    ["Offset of field: amdgpu_cs_ib_info::ib_mc_address"]
        [::std::mem::offset_of!(amdgpu_cs_ib_info, ib_mc_address) - 8usize];
    ["Offset of field: amdgpu_cs_ib_info::size"]
        [::std::mem::offset_of!(amdgpu_cs_ib_info, size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_fence_info {
    pub handle: amdgpu_bo_handle,
    pub offset: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_cs_fence_info"][::std::mem::size_of::<amdgpu_cs_fence_info>() - 16usize];
    ["Alignment of amdgpu_cs_fence_info"][::std::mem::align_of::<amdgpu_cs_fence_info>() - 8usize];
    ["Offset of field: amdgpu_cs_fence_info::handle"]
        [::std::mem::offset_of!(amdgpu_cs_fence_info, handle) - 0usize];
    ["Offset of field: amdgpu_cs_fence_info::offset"]
        [::std::mem::offset_of!(amdgpu_cs_fence_info, offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_cs_request {
    pub flags: u64,
    pub ip_type: ::std::os::raw::c_uint,
    pub ip_instance: ::std::os::raw::c_uint,
    pub ring: u32,
    pub resources: amdgpu_bo_list_handle,
    pub number_of_dependencies: u32,
    pub dependencies: *mut amdgpu_cs_fence,
    pub number_of_ibs: u32,
    pub ibs: *mut amdgpu_cs_ib_info,
    pub seq_no: u64,
    pub fence_info: amdgpu_cs_fence_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_cs_request"][::std::mem::size_of::<amdgpu_cs_request>() - 88usize];
    ["Alignment of amdgpu_cs_request"][::std::mem::align_of::<amdgpu_cs_request>() - 8usize];
    ["Offset of field: amdgpu_cs_request::flags"]
        [::std::mem::offset_of!(amdgpu_cs_request, flags) - 0usize];
    ["Offset of field: amdgpu_cs_request::ip_type"]
        [::std::mem::offset_of!(amdgpu_cs_request, ip_type) - 8usize];
    ["Offset of field: amdgpu_cs_request::ip_instance"]
        [::std::mem::offset_of!(amdgpu_cs_request, ip_instance) - 12usize];
    ["Offset of field: amdgpu_cs_request::ring"]
        [::std::mem::offset_of!(amdgpu_cs_request, ring) - 16usize];
    ["Offset of field: amdgpu_cs_request::resources"]
        [::std::mem::offset_of!(amdgpu_cs_request, resources) - 24usize];
    ["Offset of field: amdgpu_cs_request::number_of_dependencies"]
        [::std::mem::offset_of!(amdgpu_cs_request, number_of_dependencies) - 32usize];
    ["Offset of field: amdgpu_cs_request::dependencies"]
        [::std::mem::offset_of!(amdgpu_cs_request, dependencies) - 40usize];
    ["Offset of field: amdgpu_cs_request::number_of_ibs"]
        [::std::mem::offset_of!(amdgpu_cs_request, number_of_ibs) - 48usize];
    ["Offset of field: amdgpu_cs_request::ibs"]
        [::std::mem::offset_of!(amdgpu_cs_request, ibs) - 56usize];
    ["Offset of field: amdgpu_cs_request::seq_no"]
        [::std::mem::offset_of!(amdgpu_cs_request, seq_no) - 64usize];
    ["Offset of field: amdgpu_cs_request::fence_info"]
        [::std::mem::offset_of!(amdgpu_cs_request, fence_info) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_buffer_size_alignments {
    pub size_local: u64,
    pub size_remote: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_buffer_size_alignments"]
        [::std::mem::size_of::<amdgpu_buffer_size_alignments>() - 16usize];
    ["Alignment of amdgpu_buffer_size_alignments"]
        [::std::mem::align_of::<amdgpu_buffer_size_alignments>() - 8usize];
    ["Offset of field: amdgpu_buffer_size_alignments::size_local"]
        [::std::mem::offset_of!(amdgpu_buffer_size_alignments, size_local) - 0usize];
    ["Offset of field: amdgpu_buffer_size_alignments::size_remote"]
        [::std::mem::offset_of!(amdgpu_buffer_size_alignments, size_remote) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_heap_info {
    pub heap_size: u64,
    pub heap_usage: u64,
    pub max_allocation: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_heap_info"][::std::mem::size_of::<amdgpu_heap_info>() - 24usize];
    ["Alignment of amdgpu_heap_info"][::std::mem::align_of::<amdgpu_heap_info>() - 8usize];
    ["Offset of field: amdgpu_heap_info::heap_size"]
        [::std::mem::offset_of!(amdgpu_heap_info, heap_size) - 0usize];
    ["Offset of field: amdgpu_heap_info::heap_usage"]
        [::std::mem::offset_of!(amdgpu_heap_info, heap_usage) - 8usize];
    ["Offset of field: amdgpu_heap_info::max_allocation"]
        [::std::mem::offset_of!(amdgpu_heap_info, max_allocation) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct amdgpu_gpu_info {
    pub asic_id: u32,
    pub chip_rev: u32,
    pub chip_external_rev: u32,
    pub family_id: u32,
    pub ids_flags: u64,
    pub max_engine_clk: u64,
    pub max_memory_clk: u64,
    pub num_shader_engines: u32,
    pub num_shader_arrays_per_engine: u32,
    pub avail_quad_shader_pipes: u32,
    pub max_quad_shader_pipes: u32,
    pub cache_entries_per_quad_pipe: u32,
    pub num_hw_gfx_contexts: u32,
    pub rb_pipes: u32,
    pub enabled_rb_pipes_mask: u32,
    pub gpu_counter_freq: u32,
    pub backend_disable: [u32; 4usize],
    pub mc_arb_ramcfg: u32,
    pub gb_addr_cfg: u32,
    pub gb_tile_mode: [u32; 32usize],
    pub gb_macro_tile_mode: [u32; 16usize],
    pub pa_sc_raster_cfg: [u32; 4usize],
    pub pa_sc_raster_cfg1: [u32; 4usize],
    pub cu_active_number: u32,
    pub cu_ao_mask: u32,
    pub cu_bitmap: [[u32; 4usize]; 4usize],
    pub vram_type: u32,
    pub vram_bit_width: u32,
    pub ce_ram_size: u32,
    pub vce_harvest_config: u32,
    pub pci_rev_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of amdgpu_gpu_info"][::std::mem::size_of::<amdgpu_gpu_info>() - 416usize];
    ["Alignment of amdgpu_gpu_info"][::std::mem::align_of::<amdgpu_gpu_info>() - 8usize];
    ["Offset of field: amdgpu_gpu_info::asic_id"]
        [::std::mem::offset_of!(amdgpu_gpu_info, asic_id) - 0usize];
    ["Offset of field: amdgpu_gpu_info::chip_rev"]
        [::std::mem::offset_of!(amdgpu_gpu_info, chip_rev) - 4usize];
    ["Offset of field: amdgpu_gpu_info::chip_external_rev"]
        [::std::mem::offset_of!(amdgpu_gpu_info, chip_external_rev) - 8usize];
    ["Offset of field: amdgpu_gpu_info::family_id"]
        [::std::mem::offset_of!(amdgpu_gpu_info, family_id) - 12usize];
    ["Offset of field: amdgpu_gpu_info::ids_flags"]
        [::std::mem::offset_of!(amdgpu_gpu_info, ids_flags) - 16usize];
    ["Offset of field: amdgpu_gpu_info::max_engine_clk"]
        [::std::mem::offset_of!(amdgpu_gpu_info, max_engine_clk) - 24usize];
    ["Offset of field: amdgpu_gpu_info::max_memory_clk"]
        [::std::mem::offset_of!(amdgpu_gpu_info, max_memory_clk) - 32usize];
    ["Offset of field: amdgpu_gpu_info::num_shader_engines"]
        [::std::mem::offset_of!(amdgpu_gpu_info, num_shader_engines) - 40usize];
    ["Offset of field: amdgpu_gpu_info::num_shader_arrays_per_engine"]
        [::std::mem::offset_of!(amdgpu_gpu_info, num_shader_arrays_per_engine) - 44usize];
    ["Offset of field: amdgpu_gpu_info::avail_quad_shader_pipes"]
        [::std::mem::offset_of!(amdgpu_gpu_info, avail_quad_shader_pipes) - 48usize];
    ["Offset of field: amdgpu_gpu_info::max_quad_shader_pipes"]
        [::std::mem::offset_of!(amdgpu_gpu_info, max_quad_shader_pipes) - 52usize];
    ["Offset of field: amdgpu_gpu_info::cache_entries_per_quad_pipe"]
        [::std::mem::offset_of!(amdgpu_gpu_info, cache_entries_per_quad_pipe) - 56usize];
    ["Offset of field: amdgpu_gpu_info::num_hw_gfx_contexts"]
        [::std::mem::offset_of!(amdgpu_gpu_info, num_hw_gfx_contexts) - 60usize];
    ["Offset of field: amdgpu_gpu_info::rb_pipes"]
        [::std::mem::offset_of!(amdgpu_gpu_info, rb_pipes) - 64usize];
    ["Offset of field: amdgpu_gpu_info::enabled_rb_pipes_mask"]
        [::std::mem::offset_of!(amdgpu_gpu_info, enabled_rb_pipes_mask) - 68usize];
    ["Offset of field: amdgpu_gpu_info::gpu_counter_freq"]
        [::std::mem::offset_of!(amdgpu_gpu_info, gpu_counter_freq) - 72usize];
    ["Offset of field: amdgpu_gpu_info::backend_disable"]
        [::std::mem::offset_of!(amdgpu_gpu_info, backend_disable) - 76usize];
    ["Offset of field: amdgpu_gpu_info::mc_arb_ramcfg"]
        [::std::mem::offset_of!(amdgpu_gpu_info, mc_arb_ramcfg) - 92usize];
    ["Offset of field: amdgpu_gpu_info::gb_addr_cfg"]
        [::std::mem::offset_of!(amdgpu_gpu_info, gb_addr_cfg) - 96usize];
    ["Offset of field: amdgpu_gpu_info::gb_tile_mode"]
        [::std::mem::offset_of!(amdgpu_gpu_info, gb_tile_mode) - 100usize];
    ["Offset of field: amdgpu_gpu_info::gb_macro_tile_mode"]
        [::std::mem::offset_of!(amdgpu_gpu_info, gb_macro_tile_mode) - 228usize];
    ["Offset of field: amdgpu_gpu_info::pa_sc_raster_cfg"]
        [::std::mem::offset_of!(amdgpu_gpu_info, pa_sc_raster_cfg) - 292usize];
    ["Offset of field: amdgpu_gpu_info::pa_sc_raster_cfg1"]
        [::std::mem::offset_of!(amdgpu_gpu_info, pa_sc_raster_cfg1) - 308usize];
    ["Offset of field: amdgpu_gpu_info::cu_active_number"]
        [::std::mem::offset_of!(amdgpu_gpu_info, cu_active_number) - 324usize];
    ["Offset of field: amdgpu_gpu_info::cu_ao_mask"]
        [::std::mem::offset_of!(amdgpu_gpu_info, cu_ao_mask) - 328usize];
    ["Offset of field: amdgpu_gpu_info::cu_bitmap"]
        [::std::mem::offset_of!(amdgpu_gpu_info, cu_bitmap) - 332usize];
    ["Offset of field: amdgpu_gpu_info::vram_type"]
        [::std::mem::offset_of!(amdgpu_gpu_info, vram_type) - 396usize];
    ["Offset of field: amdgpu_gpu_info::vram_bit_width"]
        [::std::mem::offset_of!(amdgpu_gpu_info, vram_bit_width) - 400usize];
    ["Offset of field: amdgpu_gpu_info::ce_ram_size"]
        [::std::mem::offset_of!(amdgpu_gpu_info, ce_ram_size) - 404usize];
    ["Offset of field: amdgpu_gpu_info::vce_harvest_config"]
        [::std::mem::offset_of!(amdgpu_gpu_info, vce_harvest_config) - 408usize];
    ["Offset of field: amdgpu_gpu_info::pci_rev_id"]
        [::std::mem::offset_of!(amdgpu_gpu_info, pci_rev_id) - 412usize];
};
unsafe extern "C" {
    pub fn amdgpu_device_initialize(
        fd: ::std::os::raw::c_int,
        major_version: *mut u32,
        minor_version: *mut u32,
        device_handle: *mut amdgpu_device_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_device_deinitialize(device_handle: amdgpu_device_handle)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_device_get_fd(device_handle: amdgpu_device_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_alloc(
        dev: amdgpu_device_handle,
        alloc_buffer: *mut amdgpu_bo_alloc_request,
        buf_handle: *mut amdgpu_bo_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_set_metadata(
        buf_handle: amdgpu_bo_handle,
        info: *mut amdgpu_bo_metadata,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_query_info(
        buf_handle: amdgpu_bo_handle,
        info: *mut amdgpu_bo_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_export(
        buf_handle: amdgpu_bo_handle,
        type_: amdgpu_bo_handle_type,
        shared_handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_import(
        dev: amdgpu_device_handle,
        type_: amdgpu_bo_handle_type,
        shared_handle: u32,
        output: *mut amdgpu_bo_import_result,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_create_bo_from_user_mem(
        dev: amdgpu_device_handle,
        cpu: *mut ::std::os::raw::c_void,
        size: u64,
        buf_handle: *mut amdgpu_bo_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_find_bo_by_cpu_mapping(
        dev: amdgpu_device_handle,
        cpu: *mut ::std::os::raw::c_void,
        size: u64,
        buf_handle: *mut amdgpu_bo_handle,
        offset_in_bo: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_free(buf_handle: amdgpu_bo_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_inc_ref(bo: amdgpu_bo_handle);
}
unsafe extern "C" {
    pub fn amdgpu_bo_cpu_map(
        buf_handle: amdgpu_bo_handle,
        cpu: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_cpu_unmap(buf_handle: amdgpu_bo_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_wait_for_idle(
        buf_handle: amdgpu_bo_handle,
        timeout_ns: u64,
        buffer_busy: *mut bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_list_create_raw(
        dev: amdgpu_device_handle,
        number_of_buffers: u32,
        buffers: *mut drm_amdgpu_bo_list_entry,
        result: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_list_destroy_raw(
        dev: amdgpu_device_handle,
        bo_list: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_list_create(
        dev: amdgpu_device_handle,
        number_of_resources: u32,
        resources: *mut amdgpu_bo_handle,
        resource_prios: *mut u8,
        result: *mut amdgpu_bo_list_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_list_destroy(handle: amdgpu_bo_list_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_list_update(
        handle: amdgpu_bo_list_handle,
        number_of_resources: u32,
        resources: *mut amdgpu_bo_handle,
        resource_prios: *mut u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_ctx_create2(
        dev: amdgpu_device_handle,
        priority: u32,
        context: *mut amdgpu_context_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_ctx_create(
        dev: amdgpu_device_handle,
        context: *mut amdgpu_context_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_ctx_free(context: amdgpu_context_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_ctx_override_priority(
        dev: amdgpu_device_handle,
        context: amdgpu_context_handle,
        master_fd: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_ctx_stable_pstate(
        context: amdgpu_context_handle,
        op: u32,
        flags: u32,
        out_flags: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_query_reset_state(
        context: amdgpu_context_handle,
        state: *mut u32,
        hangs: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_query_reset_state2(
        context: amdgpu_context_handle,
        flags: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_submit(
        context: amdgpu_context_handle,
        flags: u64,
        ibs_request: *mut amdgpu_cs_request,
        number_of_requests: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_query_fence_status(
        fence: *mut amdgpu_cs_fence,
        timeout_ns: u64,
        flags: u64,
        expired: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_wait_fences(
        fences: *mut amdgpu_cs_fence,
        fence_count: u32,
        wait_all: bool,
        timeout_ns: u64,
        status: *mut u32,
        first: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_buffer_size_alignment(
        dev: amdgpu_device_handle,
        info: *mut amdgpu_buffer_size_alignments,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_firmware_version(
        dev: amdgpu_device_handle,
        fw_type: ::std::os::raw::c_uint,
        ip_instance: ::std::os::raw::c_uint,
        index: ::std::os::raw::c_uint,
        version: *mut u32,
        feature: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_hw_ip_count(
        dev: amdgpu_device_handle,
        type_: ::std::os::raw::c_uint,
        count: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_hw_ip_info(
        dev: amdgpu_device_handle,
        type_: ::std::os::raw::c_uint,
        ip_instance: ::std::os::raw::c_uint,
        info: *mut drm_amdgpu_info_hw_ip,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_heap_info(
        dev: amdgpu_device_handle,
        heap: u32,
        flags: u32,
        info: *mut amdgpu_heap_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_crtc_from_id(
        dev: amdgpu_device_handle,
        id: ::std::os::raw::c_uint,
        result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_gpu_info(
        dev: amdgpu_device_handle,
        info: *mut amdgpu_gpu_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_info(
        dev: amdgpu_device_handle,
        info_id: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_sw_info(
        dev: amdgpu_device_handle,
        info: amdgpu_sw_info,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_gds_info(
        dev: amdgpu_device_handle,
        gds_info: *mut amdgpu_gds_resource_info,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_sensor_info(
        dev: amdgpu_device_handle,
        sensor_type: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_query_video_caps_info(
        dev: amdgpu_device_handle,
        cap_type: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_read_mm_registers(
        dev: amdgpu_device_handle,
        dword_offset: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        instance: u32,
        flags: u32,
        values: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_va_range_alloc(
        dev: amdgpu_device_handle,
        va_range_type: amdgpu_gpu_va_range,
        size: u64,
        va_base_alignment: u64,
        va_base_required: u64,
        va_base_allocated: *mut u64,
        va_range_handle: *mut amdgpu_va_handle,
        flags: u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_va_range_free(va_range_handle: amdgpu_va_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_va_range_query(
        dev: amdgpu_device_handle,
        type_: amdgpu_gpu_va_range,
        start: *mut u64,
        end: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_va_op(
        bo: amdgpu_bo_handle,
        offset: u64,
        size: u64,
        addr: u64,
        flags: u64,
        ops: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_bo_va_op_raw(
        dev: amdgpu_device_handle,
        bo: amdgpu_bo_handle,
        offset: u64,
        size: u64,
        addr: u64,
        flags: u64,
        ops: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_create_semaphore(sem: *mut amdgpu_semaphore_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_signal_semaphore(
        ctx: amdgpu_context_handle,
        ip_type: u32,
        ip_instance: u32,
        ring: u32,
        sem: amdgpu_semaphore_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_wait_semaphore(
        ctx: amdgpu_context_handle,
        ip_type: u32,
        ip_instance: u32,
        ring: u32,
        sem: amdgpu_semaphore_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_destroy_semaphore(sem: amdgpu_semaphore_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_get_marketing_name(dev: amdgpu_device_handle) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn amdgpu_cs_create_syncobj2(
        dev: amdgpu_device_handle,
        flags: u32,
        syncobj: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_create_syncobj(
        dev: amdgpu_device_handle,
        syncobj: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_destroy_syncobj(
        dev: amdgpu_device_handle,
        syncobj: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_reset(
        dev: amdgpu_device_handle,
        syncobjs: *const u32,
        syncobj_count: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_signal(
        dev: amdgpu_device_handle,
        syncobjs: *const u32,
        syncobj_count: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_timeline_signal(
        dev: amdgpu_device_handle,
        syncobjs: *const u32,
        points: *mut u64,
        syncobj_count: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_wait(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        num_handles: ::std::os::raw::c_uint,
        timeout_nsec: i64,
        flags: ::std::os::raw::c_uint,
        first_signaled: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_timeline_wait(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        points: *mut u64,
        num_handles: ::std::os::raw::c_uint,
        timeout_nsec: i64,
        flags: ::std::os::raw::c_uint,
        first_signaled: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_query(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        points: *mut u64,
        num_handles: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_query2(
        dev: amdgpu_device_handle,
        handles: *mut u32,
        points: *mut u64,
        num_handles: ::std::os::raw::c_uint,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_export_syncobj(
        dev: amdgpu_device_handle,
        syncobj: u32,
        shared_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_import_syncobj(
        dev: amdgpu_device_handle,
        shared_fd: ::std::os::raw::c_int,
        syncobj: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_export_sync_file(
        dev: amdgpu_device_handle,
        syncobj: u32,
        sync_file_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_import_sync_file(
        dev: amdgpu_device_handle,
        syncobj: u32,
        sync_file_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_export_sync_file2(
        dev: amdgpu_device_handle,
        syncobj: u32,
        point: u64,
        flags: u32,
        sync_file_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_import_sync_file2(
        dev: amdgpu_device_handle,
        syncobj: u32,
        point: u64,
        sync_file_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_syncobj_transfer(
        dev: amdgpu_device_handle,
        dst_handle: u32,
        dst_point: u64,
        src_handle: u32,
        src_point: u64,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_fence_to_handle(
        dev: amdgpu_device_handle,
        fence: *mut amdgpu_cs_fence,
        what: u32,
        out_handle: *mut u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_submit_raw(
        dev: amdgpu_device_handle,
        context: amdgpu_context_handle,
        bo_list_handle: amdgpu_bo_list_handle,
        num_chunks: ::std::os::raw::c_int,
        chunks: *mut drm_amdgpu_cs_chunk,
        seq_no: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_submit_raw2(
        dev: amdgpu_device_handle,
        context: amdgpu_context_handle,
        bo_list_handle: u32,
        num_chunks: ::std::os::raw::c_int,
        chunks: *mut drm_amdgpu_cs_chunk,
        seq_no: *mut u64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_cs_chunk_fence_to_dep(
        fence: *mut amdgpu_cs_fence,
        dep: *mut drm_amdgpu_cs_chunk_dep,
    );
}
unsafe extern "C" {
    pub fn amdgpu_cs_chunk_fence_info_to_data(
        fence_info: *mut amdgpu_cs_fence_info,
        data: *mut drm_amdgpu_cs_chunk_data,
    );
}
unsafe extern "C" {
    pub fn amdgpu_vm_reserve_vmid(dev: amdgpu_device_handle, flags: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn amdgpu_vm_unreserve_vmid(dev: amdgpu_device_handle, flags: u32)
        -> ::std::os::raw::c_int;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type drm_handle_t = ::std::os::raw::c_uint;
pub type drm_context_t = ::std::os::raw::c_uint;
pub type drm_drawable_t = ::std::os::raw::c_uint;
pub type drm_magic_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_clip_rect {
    pub x1: ::std::os::raw::c_ushort,
    pub y1: ::std::os::raw::c_ushort,
    pub x2: ::std::os::raw::c_ushort,
    pub y2: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_clip_rect"][::std::mem::size_of::<drm_clip_rect>() - 8usize];
    ["Alignment of drm_clip_rect"][::std::mem::align_of::<drm_clip_rect>() - 2usize];
    ["Offset of field: drm_clip_rect::x1"][::std::mem::offset_of!(drm_clip_rect, x1) - 0usize];
    ["Offset of field: drm_clip_rect::y1"][::std::mem::offset_of!(drm_clip_rect, y1) - 2usize];
    ["Offset of field: drm_clip_rect::x2"][::std::mem::offset_of!(drm_clip_rect, x2) - 4usize];
    ["Offset of field: drm_clip_rect::y2"][::std::mem::offset_of!(drm_clip_rect, y2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_drawable_info {
    pub num_rects: ::std::os::raw::c_uint,
    pub rects: *mut drm_clip_rect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_drawable_info"][::std::mem::size_of::<drm_drawable_info>() - 16usize];
    ["Alignment of drm_drawable_info"][::std::mem::align_of::<drm_drawable_info>() - 8usize];
    ["Offset of field: drm_drawable_info::num_rects"]
        [::std::mem::offset_of!(drm_drawable_info, num_rects) - 0usize];
    ["Offset of field: drm_drawable_info::rects"]
        [::std::mem::offset_of!(drm_drawable_info, rects) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tex_region {
    pub next: ::std::os::raw::c_uchar,
    pub prev: ::std::os::raw::c_uchar,
    pub in_use: ::std::os::raw::c_uchar,
    pub padding: ::std::os::raw::c_uchar,
    pub age: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_tex_region"][::std::mem::size_of::<drm_tex_region>() - 8usize];
    ["Alignment of drm_tex_region"][::std::mem::align_of::<drm_tex_region>() - 4usize];
    ["Offset of field: drm_tex_region::next"]
        [::std::mem::offset_of!(drm_tex_region, next) - 0usize];
    ["Offset of field: drm_tex_region::prev"]
        [::std::mem::offset_of!(drm_tex_region, prev) - 1usize];
    ["Offset of field: drm_tex_region::in_use"]
        [::std::mem::offset_of!(drm_tex_region, in_use) - 2usize];
    ["Offset of field: drm_tex_region::padding"]
        [::std::mem::offset_of!(drm_tex_region, padding) - 3usize];
    ["Offset of field: drm_tex_region::age"][::std::mem::offset_of!(drm_tex_region, age) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_hw_lock {
    pub lock: ::std::os::raw::c_uint,
    pub padding: [::std::os::raw::c_char; 60usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_hw_lock"][::std::mem::size_of::<drm_hw_lock>() - 64usize];
    ["Alignment of drm_hw_lock"][::std::mem::align_of::<drm_hw_lock>() - 4usize];
    ["Offset of field: drm_hw_lock::lock"][::std::mem::offset_of!(drm_hw_lock, lock) - 0usize];
    ["Offset of field: drm_hw_lock::padding"]
        [::std::mem::offset_of!(drm_hw_lock, padding) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_version {
    pub version_major: ::std::os::raw::c_int,
    pub version_minor: ::std::os::raw::c_int,
    pub version_patchlevel: ::std::os::raw::c_int,
    pub name_len: __kernel_size_t,
    pub name: *mut ::std::os::raw::c_char,
    pub date_len: __kernel_size_t,
    pub date: *mut ::std::os::raw::c_char,
    pub desc_len: __kernel_size_t,
    pub desc: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_version"][::std::mem::size_of::<drm_version>() - 64usize];
    ["Alignment of drm_version"][::std::mem::align_of::<drm_version>() - 8usize];
    ["Offset of field: drm_version::version_major"]
        [::std::mem::offset_of!(drm_version, version_major) - 0usize];
    ["Offset of field: drm_version::version_minor"]
        [::std::mem::offset_of!(drm_version, version_minor) - 4usize];
    ["Offset of field: drm_version::version_patchlevel"]
        [::std::mem::offset_of!(drm_version, version_patchlevel) - 8usize];
    ["Offset of field: drm_version::name_len"]
        [::std::mem::offset_of!(drm_version, name_len) - 16usize];
    ["Offset of field: drm_version::name"][::std::mem::offset_of!(drm_version, name) - 24usize];
    ["Offset of field: drm_version::date_len"]
        [::std::mem::offset_of!(drm_version, date_len) - 32usize];
    ["Offset of field: drm_version::date"][::std::mem::offset_of!(drm_version, date) - 40usize];
    ["Offset of field: drm_version::desc_len"]
        [::std::mem::offset_of!(drm_version, desc_len) - 48usize];
    ["Offset of field: drm_version::desc"][::std::mem::offset_of!(drm_version, desc) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_unique {
    pub unique_len: __kernel_size_t,
    pub unique: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_unique"][::std::mem::size_of::<drm_unique>() - 16usize];
    ["Alignment of drm_unique"][::std::mem::align_of::<drm_unique>() - 8usize];
    ["Offset of field: drm_unique::unique_len"]
        [::std::mem::offset_of!(drm_unique, unique_len) - 0usize];
    ["Offset of field: drm_unique::unique"][::std::mem::offset_of!(drm_unique, unique) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_list {
    pub count: ::std::os::raw::c_int,
    pub version: *mut drm_version,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_list"][::std::mem::size_of::<drm_list>() - 16usize];
    ["Alignment of drm_list"][::std::mem::align_of::<drm_list>() - 8usize];
    ["Offset of field: drm_list::count"][::std::mem::offset_of!(drm_list, count) - 0usize];
    ["Offset of field: drm_list::version"][::std::mem::offset_of!(drm_list, version) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_block {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_block"][::std::mem::size_of::<drm_block>() - 4usize];
    ["Alignment of drm_block"][::std::mem::align_of::<drm_block>() - 4usize];
    ["Offset of field: drm_block::unused"][::std::mem::offset_of!(drm_block, unused) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_control {
    pub func: drm_control__bindgen_ty_1,
    pub irq: ::std::os::raw::c_int,
}
pub const drm_control_DRM_ADD_COMMAND: drm_control__bindgen_ty_1 = 0;
pub const drm_control_DRM_RM_COMMAND: drm_control__bindgen_ty_1 = 1;
pub const drm_control_DRM_INST_HANDLER: drm_control__bindgen_ty_1 = 2;
pub const drm_control_DRM_UNINST_HANDLER: drm_control__bindgen_ty_1 = 3;
pub type drm_control__bindgen_ty_1 = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_control"][::std::mem::size_of::<drm_control>() - 8usize];
    ["Alignment of drm_control"][::std::mem::align_of::<drm_control>() - 4usize];
    ["Offset of field: drm_control::func"][::std::mem::offset_of!(drm_control, func) - 0usize];
    ["Offset of field: drm_control::irq"][::std::mem::offset_of!(drm_control, irq) - 4usize];
};
pub const drm_map_type__DRM_FRAME_BUFFER: drm_map_type = 0;
pub const drm_map_type__DRM_REGISTERS: drm_map_type = 1;
pub const drm_map_type__DRM_SHM: drm_map_type = 2;
pub const drm_map_type__DRM_AGP: drm_map_type = 3;
pub const drm_map_type__DRM_SCATTER_GATHER: drm_map_type = 4;
pub const drm_map_type__DRM_CONSISTENT: drm_map_type = 5;
pub type drm_map_type = ::std::os::raw::c_uint;
pub const drm_map_flags__DRM_RESTRICTED: drm_map_flags = 1;
pub const drm_map_flags__DRM_READ_ONLY: drm_map_flags = 2;
pub const drm_map_flags__DRM_LOCKED: drm_map_flags = 4;
pub const drm_map_flags__DRM_KERNEL: drm_map_flags = 8;
pub const drm_map_flags__DRM_WRITE_COMBINING: drm_map_flags = 16;
pub const drm_map_flags__DRM_CONTAINS_LOCK: drm_map_flags = 32;
pub const drm_map_flags__DRM_REMOVABLE: drm_map_flags = 64;
pub const drm_map_flags__DRM_DRIVER: drm_map_flags = 128;
pub type drm_map_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx_priv_map {
    pub ctx_id: ::std::os::raw::c_uint,
    pub handle: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_ctx_priv_map"][::std::mem::size_of::<drm_ctx_priv_map>() - 16usize];
    ["Alignment of drm_ctx_priv_map"][::std::mem::align_of::<drm_ctx_priv_map>() - 8usize];
    ["Offset of field: drm_ctx_priv_map::ctx_id"]
        [::std::mem::offset_of!(drm_ctx_priv_map, ctx_id) - 0usize];
    ["Offset of field: drm_ctx_priv_map::handle"]
        [::std::mem::offset_of!(drm_ctx_priv_map, handle) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_map {
    pub offset: ::std::os::raw::c_ulong,
    pub size: ::std::os::raw::c_ulong,
    pub type_: drm_map_type,
    pub flags: drm_map_flags,
    pub handle: *mut ::std::os::raw::c_void,
    pub mtrr: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_map"][::std::mem::size_of::<drm_map>() - 40usize];
    ["Alignment of drm_map"][::std::mem::align_of::<drm_map>() - 8usize];
    ["Offset of field: drm_map::offset"][::std::mem::offset_of!(drm_map, offset) - 0usize];
    ["Offset of field: drm_map::size"][::std::mem::offset_of!(drm_map, size) - 8usize];
    ["Offset of field: drm_map::type_"][::std::mem::offset_of!(drm_map, type_) - 16usize];
    ["Offset of field: drm_map::flags"][::std::mem::offset_of!(drm_map, flags) - 20usize];
    ["Offset of field: drm_map::handle"][::std::mem::offset_of!(drm_map, handle) - 24usize];
    ["Offset of field: drm_map::mtrr"][::std::mem::offset_of!(drm_map, mtrr) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_client {
    pub idx: ::std::os::raw::c_int,
    pub auth: ::std::os::raw::c_int,
    pub pid: ::std::os::raw::c_ulong,
    pub uid: ::std::os::raw::c_ulong,
    pub magic: ::std::os::raw::c_ulong,
    pub iocs: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_client"][::std::mem::size_of::<drm_client>() - 40usize];
    ["Alignment of drm_client"][::std::mem::align_of::<drm_client>() - 8usize];
    ["Offset of field: drm_client::idx"][::std::mem::offset_of!(drm_client, idx) - 0usize];
    ["Offset of field: drm_client::auth"][::std::mem::offset_of!(drm_client, auth) - 4usize];
    ["Offset of field: drm_client::pid"][::std::mem::offset_of!(drm_client, pid) - 8usize];
    ["Offset of field: drm_client::uid"][::std::mem::offset_of!(drm_client, uid) - 16usize];
    ["Offset of field: drm_client::magic"][::std::mem::offset_of!(drm_client, magic) - 24usize];
    ["Offset of field: drm_client::iocs"][::std::mem::offset_of!(drm_client, iocs) - 32usize];
};
pub const drm_stat_type__DRM_STAT_LOCK: drm_stat_type = 0;
pub const drm_stat_type__DRM_STAT_OPENS: drm_stat_type = 1;
pub const drm_stat_type__DRM_STAT_CLOSES: drm_stat_type = 2;
pub const drm_stat_type__DRM_STAT_IOCTLS: drm_stat_type = 3;
pub const drm_stat_type__DRM_STAT_LOCKS: drm_stat_type = 4;
pub const drm_stat_type__DRM_STAT_UNLOCKS: drm_stat_type = 5;
pub const drm_stat_type__DRM_STAT_VALUE: drm_stat_type = 6;
pub const drm_stat_type__DRM_STAT_BYTE: drm_stat_type = 7;
pub const drm_stat_type__DRM_STAT_COUNT: drm_stat_type = 8;
pub const drm_stat_type__DRM_STAT_IRQ: drm_stat_type = 9;
pub const drm_stat_type__DRM_STAT_PRIMARY: drm_stat_type = 10;
pub const drm_stat_type__DRM_STAT_SECONDARY: drm_stat_type = 11;
pub const drm_stat_type__DRM_STAT_DMA: drm_stat_type = 12;
pub const drm_stat_type__DRM_STAT_SPECIAL: drm_stat_type = 13;
pub const drm_stat_type__DRM_STAT_MISSED: drm_stat_type = 14;
pub type drm_stat_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_stats {
    pub count: ::std::os::raw::c_ulong,
    pub data: [drm_stats__bindgen_ty_1; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_stats__bindgen_ty_1 {
    pub value: ::std::os::raw::c_ulong,
    pub type_: drm_stat_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_stats__bindgen_ty_1"][::std::mem::size_of::<drm_stats__bindgen_ty_1>() - 16usize];
    ["Alignment of drm_stats__bindgen_ty_1"]
        [::std::mem::align_of::<drm_stats__bindgen_ty_1>() - 8usize];
    ["Offset of field: drm_stats__bindgen_ty_1::value"]
        [::std::mem::offset_of!(drm_stats__bindgen_ty_1, value) - 0usize];
    ["Offset of field: drm_stats__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(drm_stats__bindgen_ty_1, type_) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_stats"][::std::mem::size_of::<drm_stats>() - 248usize];
    ["Alignment of drm_stats"][::std::mem::align_of::<drm_stats>() - 8usize];
    ["Offset of field: drm_stats::count"][::std::mem::offset_of!(drm_stats, count) - 0usize];
    ["Offset of field: drm_stats::data"][::std::mem::offset_of!(drm_stats, data) - 8usize];
};
pub const drm_lock_flags__DRM_LOCK_READY: drm_lock_flags = 1;
pub const drm_lock_flags__DRM_LOCK_QUIESCENT: drm_lock_flags = 2;
pub const drm_lock_flags__DRM_LOCK_FLUSH: drm_lock_flags = 4;
pub const drm_lock_flags__DRM_LOCK_FLUSH_ALL: drm_lock_flags = 8;
pub const drm_lock_flags__DRM_HALT_ALL_QUEUES: drm_lock_flags = 16;
pub const drm_lock_flags__DRM_HALT_CUR_QUEUES: drm_lock_flags = 32;
pub type drm_lock_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_lock {
    pub context: ::std::os::raw::c_int,
    pub flags: drm_lock_flags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_lock"][::std::mem::size_of::<drm_lock>() - 8usize];
    ["Alignment of drm_lock"][::std::mem::align_of::<drm_lock>() - 4usize];
    ["Offset of field: drm_lock::context"][::std::mem::offset_of!(drm_lock, context) - 0usize];
    ["Offset of field: drm_lock::flags"][::std::mem::offset_of!(drm_lock, flags) - 4usize];
};
pub const drm_dma_flags__DRM_DMA_BLOCK: drm_dma_flags = 1;
pub const drm_dma_flags__DRM_DMA_WHILE_LOCKED: drm_dma_flags = 2;
pub const drm_dma_flags__DRM_DMA_PRIORITY: drm_dma_flags = 4;
pub const drm_dma_flags__DRM_DMA_WAIT: drm_dma_flags = 16;
pub const drm_dma_flags__DRM_DMA_SMALLER_OK: drm_dma_flags = 32;
pub const drm_dma_flags__DRM_DMA_LARGER_OK: drm_dma_flags = 64;
pub type drm_dma_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_desc {
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub low_mark: ::std::os::raw::c_int,
    pub high_mark: ::std::os::raw::c_int,
    pub flags: drm_buf_desc__bindgen_ty_1,
    pub agp_start: ::std::os::raw::c_ulong,
}
pub const drm_buf_desc__DRM_PAGE_ALIGN: drm_buf_desc__bindgen_ty_1 = 1;
pub const drm_buf_desc__DRM_AGP_BUFFER: drm_buf_desc__bindgen_ty_1 = 2;
pub const drm_buf_desc__DRM_SG_BUFFER: drm_buf_desc__bindgen_ty_1 = 4;
pub const drm_buf_desc__DRM_FB_BUFFER: drm_buf_desc__bindgen_ty_1 = 8;
pub const drm_buf_desc__DRM_PCI_BUFFER_RO: drm_buf_desc__bindgen_ty_1 = 16;
pub type drm_buf_desc__bindgen_ty_1 = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_buf_desc"][::std::mem::size_of::<drm_buf_desc>() - 32usize];
    ["Alignment of drm_buf_desc"][::std::mem::align_of::<drm_buf_desc>() - 8usize];
    ["Offset of field: drm_buf_desc::count"][::std::mem::offset_of!(drm_buf_desc, count) - 0usize];
    ["Offset of field: drm_buf_desc::size"][::std::mem::offset_of!(drm_buf_desc, size) - 4usize];
    ["Offset of field: drm_buf_desc::low_mark"]
        [::std::mem::offset_of!(drm_buf_desc, low_mark) - 8usize];
    ["Offset of field: drm_buf_desc::high_mark"]
        [::std::mem::offset_of!(drm_buf_desc, high_mark) - 12usize];
    ["Offset of field: drm_buf_desc::flags"][::std::mem::offset_of!(drm_buf_desc, flags) - 16usize];
    ["Offset of field: drm_buf_desc::agp_start"]
        [::std::mem::offset_of!(drm_buf_desc, agp_start) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_info {
    pub count: ::std::os::raw::c_int,
    pub list: *mut drm_buf_desc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_buf_info"][::std::mem::size_of::<drm_buf_info>() - 16usize];
    ["Alignment of drm_buf_info"][::std::mem::align_of::<drm_buf_info>() - 8usize];
    ["Offset of field: drm_buf_info::count"][::std::mem::offset_of!(drm_buf_info, count) - 0usize];
    ["Offset of field: drm_buf_info::list"][::std::mem::offset_of!(drm_buf_info, list) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_free {
    pub count: ::std::os::raw::c_int,
    pub list: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_buf_free"][::std::mem::size_of::<drm_buf_free>() - 16usize];
    ["Alignment of drm_buf_free"][::std::mem::align_of::<drm_buf_free>() - 8usize];
    ["Offset of field: drm_buf_free::count"][::std::mem::offset_of!(drm_buf_free, count) - 0usize];
    ["Offset of field: drm_buf_free::list"][::std::mem::offset_of!(drm_buf_free, list) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_pub {
    pub idx: ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub used: ::std::os::raw::c_int,
    pub address: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_buf_pub"][::std::mem::size_of::<drm_buf_pub>() - 24usize];
    ["Alignment of drm_buf_pub"][::std::mem::align_of::<drm_buf_pub>() - 8usize];
    ["Offset of field: drm_buf_pub::idx"][::std::mem::offset_of!(drm_buf_pub, idx) - 0usize];
    ["Offset of field: drm_buf_pub::total"][::std::mem::offset_of!(drm_buf_pub, total) - 4usize];
    ["Offset of field: drm_buf_pub::used"][::std::mem::offset_of!(drm_buf_pub, used) - 8usize];
    ["Offset of field: drm_buf_pub::address"]
        [::std::mem::offset_of!(drm_buf_pub, address) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_buf_map {
    pub count: ::std::os::raw::c_int,
    pub virtual_: *mut ::std::os::raw::c_void,
    pub list: *mut drm_buf_pub,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_buf_map"][::std::mem::size_of::<drm_buf_map>() - 24usize];
    ["Alignment of drm_buf_map"][::std::mem::align_of::<drm_buf_map>() - 8usize];
    ["Offset of field: drm_buf_map::count"][::std::mem::offset_of!(drm_buf_map, count) - 0usize];
    ["Offset of field: drm_buf_map::virtual_"]
        [::std::mem::offset_of!(drm_buf_map, virtual_) - 8usize];
    ["Offset of field: drm_buf_map::list"][::std::mem::offset_of!(drm_buf_map, list) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_dma {
    pub context: ::std::os::raw::c_int,
    pub send_count: ::std::os::raw::c_int,
    pub send_indices: *mut ::std::os::raw::c_int,
    pub send_sizes: *mut ::std::os::raw::c_int,
    pub flags: drm_dma_flags,
    pub request_count: ::std::os::raw::c_int,
    pub request_size: ::std::os::raw::c_int,
    pub request_indices: *mut ::std::os::raw::c_int,
    pub request_sizes: *mut ::std::os::raw::c_int,
    pub granted_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_dma"][::std::mem::size_of::<drm_dma>() - 64usize];
    ["Alignment of drm_dma"][::std::mem::align_of::<drm_dma>() - 8usize];
    ["Offset of field: drm_dma::context"][::std::mem::offset_of!(drm_dma, context) - 0usize];
    ["Offset of field: drm_dma::send_count"][::std::mem::offset_of!(drm_dma, send_count) - 4usize];
    ["Offset of field: drm_dma::send_indices"]
        [::std::mem::offset_of!(drm_dma, send_indices) - 8usize];
    ["Offset of field: drm_dma::send_sizes"][::std::mem::offset_of!(drm_dma, send_sizes) - 16usize];
    ["Offset of field: drm_dma::flags"][::std::mem::offset_of!(drm_dma, flags) - 24usize];
    ["Offset of field: drm_dma::request_count"]
        [::std::mem::offset_of!(drm_dma, request_count) - 28usize];
    ["Offset of field: drm_dma::request_size"]
        [::std::mem::offset_of!(drm_dma, request_size) - 32usize];
    ["Offset of field: drm_dma::request_indices"]
        [::std::mem::offset_of!(drm_dma, request_indices) - 40usize];
    ["Offset of field: drm_dma::request_sizes"]
        [::std::mem::offset_of!(drm_dma, request_sizes) - 48usize];
    ["Offset of field: drm_dma::granted_count"]
        [::std::mem::offset_of!(drm_dma, granted_count) - 56usize];
};
pub const drm_ctx_flags__DRM_CONTEXT_PRESERVED: drm_ctx_flags = 1;
pub const drm_ctx_flags__DRM_CONTEXT_2DONLY: drm_ctx_flags = 2;
pub type drm_ctx_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx {
    pub handle: drm_context_t,
    pub flags: drm_ctx_flags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_ctx"][::std::mem::size_of::<drm_ctx>() - 8usize];
    ["Alignment of drm_ctx"][::std::mem::align_of::<drm_ctx>() - 4usize];
    ["Offset of field: drm_ctx::handle"][::std::mem::offset_of!(drm_ctx, handle) - 0usize];
    ["Offset of field: drm_ctx::flags"][::std::mem::offset_of!(drm_ctx, flags) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_ctx_res {
    pub count: ::std::os::raw::c_int,
    pub contexts: *mut drm_ctx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_ctx_res"][::std::mem::size_of::<drm_ctx_res>() - 16usize];
    ["Alignment of drm_ctx_res"][::std::mem::align_of::<drm_ctx_res>() - 8usize];
    ["Offset of field: drm_ctx_res::count"][::std::mem::offset_of!(drm_ctx_res, count) - 0usize];
    ["Offset of field: drm_ctx_res::contexts"]
        [::std::mem::offset_of!(drm_ctx_res, contexts) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_draw {
    pub handle: drm_drawable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_draw"][::std::mem::size_of::<drm_draw>() - 4usize];
    ["Alignment of drm_draw"][::std::mem::align_of::<drm_draw>() - 4usize];
    ["Offset of field: drm_draw::handle"][::std::mem::offset_of!(drm_draw, handle) - 0usize];
};
pub const drm_drawable_info_type_t_DRM_DRAWABLE_CLIPRECTS: drm_drawable_info_type_t = 0;
pub type drm_drawable_info_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_update_draw {
    pub handle: drm_drawable_t,
    pub type_: ::std::os::raw::c_uint,
    pub num: ::std::os::raw::c_uint,
    pub data: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_update_draw"][::std::mem::size_of::<drm_update_draw>() - 24usize];
    ["Alignment of drm_update_draw"][::std::mem::align_of::<drm_update_draw>() - 8usize];
    ["Offset of field: drm_update_draw::handle"]
        [::std::mem::offset_of!(drm_update_draw, handle) - 0usize];
    ["Offset of field: drm_update_draw::type_"]
        [::std::mem::offset_of!(drm_update_draw, type_) - 4usize];
    ["Offset of field: drm_update_draw::num"]
        [::std::mem::offset_of!(drm_update_draw, num) - 8usize];
    ["Offset of field: drm_update_draw::data"]
        [::std::mem::offset_of!(drm_update_draw, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_auth {
    pub magic: drm_magic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_auth"][::std::mem::size_of::<drm_auth>() - 4usize];
    ["Alignment of drm_auth"][::std::mem::align_of::<drm_auth>() - 4usize];
    ["Offset of field: drm_auth::magic"][::std::mem::offset_of!(drm_auth, magic) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_irq_busid {
    pub irq: ::std::os::raw::c_int,
    pub busnum: ::std::os::raw::c_int,
    pub devnum: ::std::os::raw::c_int,
    pub funcnum: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_irq_busid"][::std::mem::size_of::<drm_irq_busid>() - 16usize];
    ["Alignment of drm_irq_busid"][::std::mem::align_of::<drm_irq_busid>() - 4usize];
    ["Offset of field: drm_irq_busid::irq"][::std::mem::offset_of!(drm_irq_busid, irq) - 0usize];
    ["Offset of field: drm_irq_busid::busnum"]
        [::std::mem::offset_of!(drm_irq_busid, busnum) - 4usize];
    ["Offset of field: drm_irq_busid::devnum"]
        [::std::mem::offset_of!(drm_irq_busid, devnum) - 8usize];
    ["Offset of field: drm_irq_busid::funcnum"]
        [::std::mem::offset_of!(drm_irq_busid, funcnum) - 12usize];
};
pub const drm_vblank_seq_type__DRM_VBLANK_ABSOLUTE: drm_vblank_seq_type = 0;
pub const drm_vblank_seq_type__DRM_VBLANK_RELATIVE: drm_vblank_seq_type = 1;
pub const drm_vblank_seq_type__DRM_VBLANK_HIGH_CRTC_MASK: drm_vblank_seq_type = 62;
pub const drm_vblank_seq_type__DRM_VBLANK_EVENT: drm_vblank_seq_type = 67108864;
pub const drm_vblank_seq_type__DRM_VBLANK_FLIP: drm_vblank_seq_type = 134217728;
pub const drm_vblank_seq_type__DRM_VBLANK_NEXTONMISS: drm_vblank_seq_type = 268435456;
pub const drm_vblank_seq_type__DRM_VBLANK_SECONDARY: drm_vblank_seq_type = 536870912;
pub const drm_vblank_seq_type__DRM_VBLANK_SIGNAL: drm_vblank_seq_type = 1073741824;
pub type drm_vblank_seq_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_wait_vblank_request {
    pub type_: drm_vblank_seq_type,
    pub sequence: ::std::os::raw::c_uint,
    pub signal: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_wait_vblank_request"][::std::mem::size_of::<drm_wait_vblank_request>() - 16usize];
    ["Alignment of drm_wait_vblank_request"]
        [::std::mem::align_of::<drm_wait_vblank_request>() - 8usize];
    ["Offset of field: drm_wait_vblank_request::type_"]
        [::std::mem::offset_of!(drm_wait_vblank_request, type_) - 0usize];
    ["Offset of field: drm_wait_vblank_request::sequence"]
        [::std::mem::offset_of!(drm_wait_vblank_request, sequence) - 4usize];
    ["Offset of field: drm_wait_vblank_request::signal"]
        [::std::mem::offset_of!(drm_wait_vblank_request, signal) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_wait_vblank_reply {
    pub type_: drm_vblank_seq_type,
    pub sequence: ::std::os::raw::c_uint,
    pub tval_sec: ::std::os::raw::c_long,
    pub tval_usec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_wait_vblank_reply"][::std::mem::size_of::<drm_wait_vblank_reply>() - 24usize];
    ["Alignment of drm_wait_vblank_reply"]
        [::std::mem::align_of::<drm_wait_vblank_reply>() - 8usize];
    ["Offset of field: drm_wait_vblank_reply::type_"]
        [::std::mem::offset_of!(drm_wait_vblank_reply, type_) - 0usize];
    ["Offset of field: drm_wait_vblank_reply::sequence"]
        [::std::mem::offset_of!(drm_wait_vblank_reply, sequence) - 4usize];
    ["Offset of field: drm_wait_vblank_reply::tval_sec"]
        [::std::mem::offset_of!(drm_wait_vblank_reply, tval_sec) - 8usize];
    ["Offset of field: drm_wait_vblank_reply::tval_usec"]
        [::std::mem::offset_of!(drm_wait_vblank_reply, tval_usec) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_wait_vblank {
    pub request: drm_wait_vblank_request,
    pub reply: drm_wait_vblank_reply,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_wait_vblank"][::std::mem::size_of::<drm_wait_vblank>() - 24usize];
    ["Alignment of drm_wait_vblank"][::std::mem::align_of::<drm_wait_vblank>() - 8usize];
    ["Offset of field: drm_wait_vblank::request"]
        [::std::mem::offset_of!(drm_wait_vblank, request) - 0usize];
    ["Offset of field: drm_wait_vblank::reply"]
        [::std::mem::offset_of!(drm_wait_vblank, reply) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_modeset_ctl {
    pub crtc: __u32,
    pub cmd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_modeset_ctl"][::std::mem::size_of::<drm_modeset_ctl>() - 8usize];
    ["Alignment of drm_modeset_ctl"][::std::mem::align_of::<drm_modeset_ctl>() - 4usize];
    ["Offset of field: drm_modeset_ctl::crtc"]
        [::std::mem::offset_of!(drm_modeset_ctl, crtc) - 0usize];
    ["Offset of field: drm_modeset_ctl::cmd"]
        [::std::mem::offset_of!(drm_modeset_ctl, cmd) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_mode {
    pub mode: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_agp_mode"][::std::mem::size_of::<drm_agp_mode>() - 8usize];
    ["Alignment of drm_agp_mode"][::std::mem::align_of::<drm_agp_mode>() - 8usize];
    ["Offset of field: drm_agp_mode::mode"][::std::mem::offset_of!(drm_agp_mode, mode) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_buffer {
    pub size: ::std::os::raw::c_ulong,
    pub handle: ::std::os::raw::c_ulong,
    pub type_: ::std::os::raw::c_ulong,
    pub physical: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_agp_buffer"][::std::mem::size_of::<drm_agp_buffer>() - 32usize];
    ["Alignment of drm_agp_buffer"][::std::mem::align_of::<drm_agp_buffer>() - 8usize];
    ["Offset of field: drm_agp_buffer::size"]
        [::std::mem::offset_of!(drm_agp_buffer, size) - 0usize];
    ["Offset of field: drm_agp_buffer::handle"]
        [::std::mem::offset_of!(drm_agp_buffer, handle) - 8usize];
    ["Offset of field: drm_agp_buffer::type_"]
        [::std::mem::offset_of!(drm_agp_buffer, type_) - 16usize];
    ["Offset of field: drm_agp_buffer::physical"]
        [::std::mem::offset_of!(drm_agp_buffer, physical) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_binding {
    pub handle: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_agp_binding"][::std::mem::size_of::<drm_agp_binding>() - 16usize];
    ["Alignment of drm_agp_binding"][::std::mem::align_of::<drm_agp_binding>() - 8usize];
    ["Offset of field: drm_agp_binding::handle"]
        [::std::mem::offset_of!(drm_agp_binding, handle) - 0usize];
    ["Offset of field: drm_agp_binding::offset"]
        [::std::mem::offset_of!(drm_agp_binding, offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_agp_info {
    pub agp_version_major: ::std::os::raw::c_int,
    pub agp_version_minor: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_ulong,
    pub aperture_base: ::std::os::raw::c_ulong,
    pub aperture_size: ::std::os::raw::c_ulong,
    pub memory_allowed: ::std::os::raw::c_ulong,
    pub memory_used: ::std::os::raw::c_ulong,
    pub id_vendor: ::std::os::raw::c_ushort,
    pub id_device: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_agp_info"][::std::mem::size_of::<drm_agp_info>() - 56usize];
    ["Alignment of drm_agp_info"][::std::mem::align_of::<drm_agp_info>() - 8usize];
    ["Offset of field: drm_agp_info::agp_version_major"]
        [::std::mem::offset_of!(drm_agp_info, agp_version_major) - 0usize];
    ["Offset of field: drm_agp_info::agp_version_minor"]
        [::std::mem::offset_of!(drm_agp_info, agp_version_minor) - 4usize];
    ["Offset of field: drm_agp_info::mode"][::std::mem::offset_of!(drm_agp_info, mode) - 8usize];
    ["Offset of field: drm_agp_info::aperture_base"]
        [::std::mem::offset_of!(drm_agp_info, aperture_base) - 16usize];
    ["Offset of field: drm_agp_info::aperture_size"]
        [::std::mem::offset_of!(drm_agp_info, aperture_size) - 24usize];
    ["Offset of field: drm_agp_info::memory_allowed"]
        [::std::mem::offset_of!(drm_agp_info, memory_allowed) - 32usize];
    ["Offset of field: drm_agp_info::memory_used"]
        [::std::mem::offset_of!(drm_agp_info, memory_used) - 40usize];
    ["Offset of field: drm_agp_info::id_vendor"]
        [::std::mem::offset_of!(drm_agp_info, id_vendor) - 48usize];
    ["Offset of field: drm_agp_info::id_device"]
        [::std::mem::offset_of!(drm_agp_info, id_device) - 50usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_scatter_gather {
    pub size: ::std::os::raw::c_ulong,
    pub handle: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_scatter_gather"][::std::mem::size_of::<drm_scatter_gather>() - 16usize];
    ["Alignment of drm_scatter_gather"][::std::mem::align_of::<drm_scatter_gather>() - 8usize];
    ["Offset of field: drm_scatter_gather::size"]
        [::std::mem::offset_of!(drm_scatter_gather, size) - 0usize];
    ["Offset of field: drm_scatter_gather::handle"]
        [::std::mem::offset_of!(drm_scatter_gather, handle) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_set_version {
    pub drm_di_major: ::std::os::raw::c_int,
    pub drm_di_minor: ::std::os::raw::c_int,
    pub drm_dd_major: ::std::os::raw::c_int,
    pub drm_dd_minor: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_set_version"][::std::mem::size_of::<drm_set_version>() - 16usize];
    ["Alignment of drm_set_version"][::std::mem::align_of::<drm_set_version>() - 4usize];
    ["Offset of field: drm_set_version::drm_di_major"]
        [::std::mem::offset_of!(drm_set_version, drm_di_major) - 0usize];
    ["Offset of field: drm_set_version::drm_di_minor"]
        [::std::mem::offset_of!(drm_set_version, drm_di_minor) - 4usize];
    ["Offset of field: drm_set_version::drm_dd_major"]
        [::std::mem::offset_of!(drm_set_version, drm_dd_major) - 8usize];
    ["Offset of field: drm_set_version::drm_dd_minor"]
        [::std::mem::offset_of!(drm_set_version, drm_dd_minor) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_close {
    pub handle: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_gem_close"][::std::mem::size_of::<drm_gem_close>() - 8usize];
    ["Alignment of drm_gem_close"][::std::mem::align_of::<drm_gem_close>() - 4usize];
    ["Offset of field: drm_gem_close::handle"]
        [::std::mem::offset_of!(drm_gem_close, handle) - 0usize];
    ["Offset of field: drm_gem_close::pad"][::std::mem::offset_of!(drm_gem_close, pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_flink {
    pub handle: __u32,
    pub name: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_gem_flink"][::std::mem::size_of::<drm_gem_flink>() - 8usize];
    ["Alignment of drm_gem_flink"][::std::mem::align_of::<drm_gem_flink>() - 4usize];
    ["Offset of field: drm_gem_flink::handle"]
        [::std::mem::offset_of!(drm_gem_flink, handle) - 0usize];
    ["Offset of field: drm_gem_flink::name"][::std::mem::offset_of!(drm_gem_flink, name) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_open {
    pub name: __u32,
    pub handle: __u32,
    pub size: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_gem_open"][::std::mem::size_of::<drm_gem_open>() - 16usize];
    ["Alignment of drm_gem_open"][::std::mem::align_of::<drm_gem_open>() - 8usize];
    ["Offset of field: drm_gem_open::name"][::std::mem::offset_of!(drm_gem_open, name) - 0usize];
    ["Offset of field: drm_gem_open::handle"]
        [::std::mem::offset_of!(drm_gem_open, handle) - 4usize];
    ["Offset of field: drm_gem_open::size"][::std::mem::offset_of!(drm_gem_open, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_get_cap {
    pub capability: __u64,
    pub value: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_get_cap"][::std::mem::size_of::<drm_get_cap>() - 16usize];
    ["Alignment of drm_get_cap"][::std::mem::align_of::<drm_get_cap>() - 8usize];
    ["Offset of field: drm_get_cap::capability"]
        [::std::mem::offset_of!(drm_get_cap, capability) - 0usize];
    ["Offset of field: drm_get_cap::value"][::std::mem::offset_of!(drm_get_cap, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_set_client_cap {
    pub capability: __u64,
    pub value: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_set_client_cap"][::std::mem::size_of::<drm_set_client_cap>() - 16usize];
    ["Alignment of drm_set_client_cap"][::std::mem::align_of::<drm_set_client_cap>() - 8usize];
    ["Offset of field: drm_set_client_cap::capability"]
        [::std::mem::offset_of!(drm_set_client_cap, capability) - 0usize];
    ["Offset of field: drm_set_client_cap::value"]
        [::std::mem::offset_of!(drm_set_client_cap, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_prime_handle {
    pub handle: __u32,
    pub flags: __u32,
    pub fd: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_prime_handle"][::std::mem::size_of::<drm_prime_handle>() - 12usize];
    ["Alignment of drm_prime_handle"][::std::mem::align_of::<drm_prime_handle>() - 4usize];
    ["Offset of field: drm_prime_handle::handle"]
        [::std::mem::offset_of!(drm_prime_handle, handle) - 0usize];
    ["Offset of field: drm_prime_handle::flags"]
        [::std::mem::offset_of!(drm_prime_handle, flags) - 4usize];
    ["Offset of field: drm_prime_handle::fd"]
        [::std::mem::offset_of!(drm_prime_handle, fd) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_create {
    pub handle: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_create"][::std::mem::size_of::<drm_syncobj_create>() - 8usize];
    ["Alignment of drm_syncobj_create"][::std::mem::align_of::<drm_syncobj_create>() - 4usize];
    ["Offset of field: drm_syncobj_create::handle"]
        [::std::mem::offset_of!(drm_syncobj_create, handle) - 0usize];
    ["Offset of field: drm_syncobj_create::flags"]
        [::std::mem::offset_of!(drm_syncobj_create, flags) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_destroy {
    pub handle: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_destroy"][::std::mem::size_of::<drm_syncobj_destroy>() - 8usize];
    ["Alignment of drm_syncobj_destroy"][::std::mem::align_of::<drm_syncobj_destroy>() - 4usize];
    ["Offset of field: drm_syncobj_destroy::handle"]
        [::std::mem::offset_of!(drm_syncobj_destroy, handle) - 0usize];
    ["Offset of field: drm_syncobj_destroy::pad"]
        [::std::mem::offset_of!(drm_syncobj_destroy, pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_handle {
    pub handle: __u32,
    pub flags: __u32,
    pub fd: __s32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_handle"][::std::mem::size_of::<drm_syncobj_handle>() - 16usize];
    ["Alignment of drm_syncobj_handle"][::std::mem::align_of::<drm_syncobj_handle>() - 4usize];
    ["Offset of field: drm_syncobj_handle::handle"]
        [::std::mem::offset_of!(drm_syncobj_handle, handle) - 0usize];
    ["Offset of field: drm_syncobj_handle::flags"]
        [::std::mem::offset_of!(drm_syncobj_handle, flags) - 4usize];
    ["Offset of field: drm_syncobj_handle::fd"]
        [::std::mem::offset_of!(drm_syncobj_handle, fd) - 8usize];
    ["Offset of field: drm_syncobj_handle::pad"]
        [::std::mem::offset_of!(drm_syncobj_handle, pad) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_transfer {
    pub src_handle: __u32,
    pub dst_handle: __u32,
    pub src_point: __u64,
    pub dst_point: __u64,
    pub flags: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_transfer"][::std::mem::size_of::<drm_syncobj_transfer>() - 32usize];
    ["Alignment of drm_syncobj_transfer"][::std::mem::align_of::<drm_syncobj_transfer>() - 8usize];
    ["Offset of field: drm_syncobj_transfer::src_handle"]
        [::std::mem::offset_of!(drm_syncobj_transfer, src_handle) - 0usize];
    ["Offset of field: drm_syncobj_transfer::dst_handle"]
        [::std::mem::offset_of!(drm_syncobj_transfer, dst_handle) - 4usize];
    ["Offset of field: drm_syncobj_transfer::src_point"]
        [::std::mem::offset_of!(drm_syncobj_transfer, src_point) - 8usize];
    ["Offset of field: drm_syncobj_transfer::dst_point"]
        [::std::mem::offset_of!(drm_syncobj_transfer, dst_point) - 16usize];
    ["Offset of field: drm_syncobj_transfer::flags"]
        [::std::mem::offset_of!(drm_syncobj_transfer, flags) - 24usize];
    ["Offset of field: drm_syncobj_transfer::pad"]
        [::std::mem::offset_of!(drm_syncobj_transfer, pad) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_wait {
    pub handles: __u64,
    pub timeout_nsec: __s64,
    pub count_handles: __u32,
    pub flags: __u32,
    pub first_signaled: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_wait"][::std::mem::size_of::<drm_syncobj_wait>() - 32usize];
    ["Alignment of drm_syncobj_wait"][::std::mem::align_of::<drm_syncobj_wait>() - 8usize];
    ["Offset of field: drm_syncobj_wait::handles"]
        [::std::mem::offset_of!(drm_syncobj_wait, handles) - 0usize];
    ["Offset of field: drm_syncobj_wait::timeout_nsec"]
        [::std::mem::offset_of!(drm_syncobj_wait, timeout_nsec) - 8usize];
    ["Offset of field: drm_syncobj_wait::count_handles"]
        [::std::mem::offset_of!(drm_syncobj_wait, count_handles) - 16usize];
    ["Offset of field: drm_syncobj_wait::flags"]
        [::std::mem::offset_of!(drm_syncobj_wait, flags) - 20usize];
    ["Offset of field: drm_syncobj_wait::first_signaled"]
        [::std::mem::offset_of!(drm_syncobj_wait, first_signaled) - 24usize];
    ["Offset of field: drm_syncobj_wait::pad"]
        [::std::mem::offset_of!(drm_syncobj_wait, pad) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_timeline_wait {
    pub handles: __u64,
    pub points: __u64,
    pub timeout_nsec: __s64,
    pub count_handles: __u32,
    pub flags: __u32,
    pub first_signaled: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_timeline_wait"]
        [::std::mem::size_of::<drm_syncobj_timeline_wait>() - 40usize];
    ["Alignment of drm_syncobj_timeline_wait"]
        [::std::mem::align_of::<drm_syncobj_timeline_wait>() - 8usize];
    ["Offset of field: drm_syncobj_timeline_wait::handles"]
        [::std::mem::offset_of!(drm_syncobj_timeline_wait, handles) - 0usize];
    ["Offset of field: drm_syncobj_timeline_wait::points"]
        [::std::mem::offset_of!(drm_syncobj_timeline_wait, points) - 8usize];
    ["Offset of field: drm_syncobj_timeline_wait::timeout_nsec"]
        [::std::mem::offset_of!(drm_syncobj_timeline_wait, timeout_nsec) - 16usize];
    ["Offset of field: drm_syncobj_timeline_wait::count_handles"]
        [::std::mem::offset_of!(drm_syncobj_timeline_wait, count_handles) - 24usize];
    ["Offset of field: drm_syncobj_timeline_wait::flags"]
        [::std::mem::offset_of!(drm_syncobj_timeline_wait, flags) - 28usize];
    ["Offset of field: drm_syncobj_timeline_wait::first_signaled"]
        [::std::mem::offset_of!(drm_syncobj_timeline_wait, first_signaled) - 32usize];
    ["Offset of field: drm_syncobj_timeline_wait::pad"]
        [::std::mem::offset_of!(drm_syncobj_timeline_wait, pad) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_array {
    pub handles: __u64,
    pub count_handles: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_array"][::std::mem::size_of::<drm_syncobj_array>() - 16usize];
    ["Alignment of drm_syncobj_array"][::std::mem::align_of::<drm_syncobj_array>() - 8usize];
    ["Offset of field: drm_syncobj_array::handles"]
        [::std::mem::offset_of!(drm_syncobj_array, handles) - 0usize];
    ["Offset of field: drm_syncobj_array::count_handles"]
        [::std::mem::offset_of!(drm_syncobj_array, count_handles) - 8usize];
    ["Offset of field: drm_syncobj_array::pad"]
        [::std::mem::offset_of!(drm_syncobj_array, pad) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_timeline_array {
    pub handles: __u64,
    pub points: __u64,
    pub count_handles: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_syncobj_timeline_array"]
        [::std::mem::size_of::<drm_syncobj_timeline_array>() - 24usize];
    ["Alignment of drm_syncobj_timeline_array"]
        [::std::mem::align_of::<drm_syncobj_timeline_array>() - 8usize];
    ["Offset of field: drm_syncobj_timeline_array::handles"]
        [::std::mem::offset_of!(drm_syncobj_timeline_array, handles) - 0usize];
    ["Offset of field: drm_syncobj_timeline_array::points"]
        [::std::mem::offset_of!(drm_syncobj_timeline_array, points) - 8usize];
    ["Offset of field: drm_syncobj_timeline_array::count_handles"]
        [::std::mem::offset_of!(drm_syncobj_timeline_array, count_handles) - 16usize];
    ["Offset of field: drm_syncobj_timeline_array::flags"]
        [::std::mem::offset_of!(drm_syncobj_timeline_array, flags) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_crtc_get_sequence {
    pub crtc_id: __u32,
    pub active: __u32,
    pub sequence: __u64,
    pub sequence_ns: __s64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_crtc_get_sequence"][::std::mem::size_of::<drm_crtc_get_sequence>() - 24usize];
    ["Alignment of drm_crtc_get_sequence"]
        [::std::mem::align_of::<drm_crtc_get_sequence>() - 8usize];
    ["Offset of field: drm_crtc_get_sequence::crtc_id"]
        [::std::mem::offset_of!(drm_crtc_get_sequence, crtc_id) - 0usize];
    ["Offset of field: drm_crtc_get_sequence::active"]
        [::std::mem::offset_of!(drm_crtc_get_sequence, active) - 4usize];
    ["Offset of field: drm_crtc_get_sequence::sequence"]
        [::std::mem::offset_of!(drm_crtc_get_sequence, sequence) - 8usize];
    ["Offset of field: drm_crtc_get_sequence::sequence_ns"]
        [::std::mem::offset_of!(drm_crtc_get_sequence, sequence_ns) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_crtc_queue_sequence {
    pub crtc_id: __u32,
    pub flags: __u32,
    pub sequence: __u64,
    pub user_data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_crtc_queue_sequence"][::std::mem::size_of::<drm_crtc_queue_sequence>() - 24usize];
    ["Alignment of drm_crtc_queue_sequence"]
        [::std::mem::align_of::<drm_crtc_queue_sequence>() - 8usize];
    ["Offset of field: drm_crtc_queue_sequence::crtc_id"]
        [::std::mem::offset_of!(drm_crtc_queue_sequence, crtc_id) - 0usize];
    ["Offset of field: drm_crtc_queue_sequence::flags"]
        [::std::mem::offset_of!(drm_crtc_queue_sequence, flags) - 4usize];
    ["Offset of field: drm_crtc_queue_sequence::sequence"]
        [::std::mem::offset_of!(drm_crtc_queue_sequence, sequence) - 8usize];
    ["Offset of field: drm_crtc_queue_sequence::user_data"]
        [::std::mem::offset_of!(drm_crtc_queue_sequence, user_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_modeinfo {
    pub clock: __u32,
    pub hdisplay: __u16,
    pub hsync_start: __u16,
    pub hsync_end: __u16,
    pub htotal: __u16,
    pub hskew: __u16,
    pub vdisplay: __u16,
    pub vsync_start: __u16,
    pub vsync_end: __u16,
    pub vtotal: __u16,
    pub vscan: __u16,
    pub vrefresh: __u32,
    pub flags: __u32,
    pub type_: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_modeinfo"][::std::mem::size_of::<drm_mode_modeinfo>() - 68usize];
    ["Alignment of drm_mode_modeinfo"][::std::mem::align_of::<drm_mode_modeinfo>() - 4usize];
    ["Offset of field: drm_mode_modeinfo::clock"]
        [::std::mem::offset_of!(drm_mode_modeinfo, clock) - 0usize];
    ["Offset of field: drm_mode_modeinfo::hdisplay"]
        [::std::mem::offset_of!(drm_mode_modeinfo, hdisplay) - 4usize];
    ["Offset of field: drm_mode_modeinfo::hsync_start"]
        [::std::mem::offset_of!(drm_mode_modeinfo, hsync_start) - 6usize];
    ["Offset of field: drm_mode_modeinfo::hsync_end"]
        [::std::mem::offset_of!(drm_mode_modeinfo, hsync_end) - 8usize];
    ["Offset of field: drm_mode_modeinfo::htotal"]
        [::std::mem::offset_of!(drm_mode_modeinfo, htotal) - 10usize];
    ["Offset of field: drm_mode_modeinfo::hskew"]
        [::std::mem::offset_of!(drm_mode_modeinfo, hskew) - 12usize];
    ["Offset of field: drm_mode_modeinfo::vdisplay"]
        [::std::mem::offset_of!(drm_mode_modeinfo, vdisplay) - 14usize];
    ["Offset of field: drm_mode_modeinfo::vsync_start"]
        [::std::mem::offset_of!(drm_mode_modeinfo, vsync_start) - 16usize];
    ["Offset of field: drm_mode_modeinfo::vsync_end"]
        [::std::mem::offset_of!(drm_mode_modeinfo, vsync_end) - 18usize];
    ["Offset of field: drm_mode_modeinfo::vtotal"]
        [::std::mem::offset_of!(drm_mode_modeinfo, vtotal) - 20usize];
    ["Offset of field: drm_mode_modeinfo::vscan"]
        [::std::mem::offset_of!(drm_mode_modeinfo, vscan) - 22usize];
    ["Offset of field: drm_mode_modeinfo::vrefresh"]
        [::std::mem::offset_of!(drm_mode_modeinfo, vrefresh) - 24usize];
    ["Offset of field: drm_mode_modeinfo::flags"]
        [::std::mem::offset_of!(drm_mode_modeinfo, flags) - 28usize];
    ["Offset of field: drm_mode_modeinfo::type_"]
        [::std::mem::offset_of!(drm_mode_modeinfo, type_) - 32usize];
    ["Offset of field: drm_mode_modeinfo::name"]
        [::std::mem::offset_of!(drm_mode_modeinfo, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_card_res {
    pub fb_id_ptr: __u64,
    pub crtc_id_ptr: __u64,
    pub connector_id_ptr: __u64,
    pub encoder_id_ptr: __u64,
    pub count_fbs: __u32,
    pub count_crtcs: __u32,
    pub count_connectors: __u32,
    pub count_encoders: __u32,
    pub min_width: __u32,
    pub max_width: __u32,
    pub min_height: __u32,
    pub max_height: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_card_res"][::std::mem::size_of::<drm_mode_card_res>() - 64usize];
    ["Alignment of drm_mode_card_res"][::std::mem::align_of::<drm_mode_card_res>() - 8usize];
    ["Offset of field: drm_mode_card_res::fb_id_ptr"]
        [::std::mem::offset_of!(drm_mode_card_res, fb_id_ptr) - 0usize];
    ["Offset of field: drm_mode_card_res::crtc_id_ptr"]
        [::std::mem::offset_of!(drm_mode_card_res, crtc_id_ptr) - 8usize];
    ["Offset of field: drm_mode_card_res::connector_id_ptr"]
        [::std::mem::offset_of!(drm_mode_card_res, connector_id_ptr) - 16usize];
    ["Offset of field: drm_mode_card_res::encoder_id_ptr"]
        [::std::mem::offset_of!(drm_mode_card_res, encoder_id_ptr) - 24usize];
    ["Offset of field: drm_mode_card_res::count_fbs"]
        [::std::mem::offset_of!(drm_mode_card_res, count_fbs) - 32usize];
    ["Offset of field: drm_mode_card_res::count_crtcs"]
        [::std::mem::offset_of!(drm_mode_card_res, count_crtcs) - 36usize];
    ["Offset of field: drm_mode_card_res::count_connectors"]
        [::std::mem::offset_of!(drm_mode_card_res, count_connectors) - 40usize];
    ["Offset of field: drm_mode_card_res::count_encoders"]
        [::std::mem::offset_of!(drm_mode_card_res, count_encoders) - 44usize];
    ["Offset of field: drm_mode_card_res::min_width"]
        [::std::mem::offset_of!(drm_mode_card_res, min_width) - 48usize];
    ["Offset of field: drm_mode_card_res::max_width"]
        [::std::mem::offset_of!(drm_mode_card_res, max_width) - 52usize];
    ["Offset of field: drm_mode_card_res::min_height"]
        [::std::mem::offset_of!(drm_mode_card_res, min_height) - 56usize];
    ["Offset of field: drm_mode_card_res::max_height"]
        [::std::mem::offset_of!(drm_mode_card_res, max_height) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc {
    pub set_connectors_ptr: __u64,
    pub count_connectors: __u32,
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub x: __u32,
    pub y: __u32,
    pub gamma_size: __u32,
    pub mode_valid: __u32,
    pub mode: drm_mode_modeinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_crtc"][::std::mem::size_of::<drm_mode_crtc>() - 104usize];
    ["Alignment of drm_mode_crtc"][::std::mem::align_of::<drm_mode_crtc>() - 8usize];
    ["Offset of field: drm_mode_crtc::set_connectors_ptr"]
        [::std::mem::offset_of!(drm_mode_crtc, set_connectors_ptr) - 0usize];
    ["Offset of field: drm_mode_crtc::count_connectors"]
        [::std::mem::offset_of!(drm_mode_crtc, count_connectors) - 8usize];
    ["Offset of field: drm_mode_crtc::crtc_id"]
        [::std::mem::offset_of!(drm_mode_crtc, crtc_id) - 12usize];
    ["Offset of field: drm_mode_crtc::fb_id"]
        [::std::mem::offset_of!(drm_mode_crtc, fb_id) - 16usize];
    ["Offset of field: drm_mode_crtc::x"][::std::mem::offset_of!(drm_mode_crtc, x) - 20usize];
    ["Offset of field: drm_mode_crtc::y"][::std::mem::offset_of!(drm_mode_crtc, y) - 24usize];
    ["Offset of field: drm_mode_crtc::gamma_size"]
        [::std::mem::offset_of!(drm_mode_crtc, gamma_size) - 28usize];
    ["Offset of field: drm_mode_crtc::mode_valid"]
        [::std::mem::offset_of!(drm_mode_crtc, mode_valid) - 32usize];
    ["Offset of field: drm_mode_crtc::mode"][::std::mem::offset_of!(drm_mode_crtc, mode) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_set_plane {
    pub plane_id: __u32,
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub flags: __u32,
    pub crtc_x: __s32,
    pub crtc_y: __s32,
    pub crtc_w: __u32,
    pub crtc_h: __u32,
    pub src_x: __u32,
    pub src_y: __u32,
    pub src_h: __u32,
    pub src_w: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_set_plane"][::std::mem::size_of::<drm_mode_set_plane>() - 48usize];
    ["Alignment of drm_mode_set_plane"][::std::mem::align_of::<drm_mode_set_plane>() - 4usize];
    ["Offset of field: drm_mode_set_plane::plane_id"]
        [::std::mem::offset_of!(drm_mode_set_plane, plane_id) - 0usize];
    ["Offset of field: drm_mode_set_plane::crtc_id"]
        [::std::mem::offset_of!(drm_mode_set_plane, crtc_id) - 4usize];
    ["Offset of field: drm_mode_set_plane::fb_id"]
        [::std::mem::offset_of!(drm_mode_set_plane, fb_id) - 8usize];
    ["Offset of field: drm_mode_set_plane::flags"]
        [::std::mem::offset_of!(drm_mode_set_plane, flags) - 12usize];
    ["Offset of field: drm_mode_set_plane::crtc_x"]
        [::std::mem::offset_of!(drm_mode_set_plane, crtc_x) - 16usize];
    ["Offset of field: drm_mode_set_plane::crtc_y"]
        [::std::mem::offset_of!(drm_mode_set_plane, crtc_y) - 20usize];
    ["Offset of field: drm_mode_set_plane::crtc_w"]
        [::std::mem::offset_of!(drm_mode_set_plane, crtc_w) - 24usize];
    ["Offset of field: drm_mode_set_plane::crtc_h"]
        [::std::mem::offset_of!(drm_mode_set_plane, crtc_h) - 28usize];
    ["Offset of field: drm_mode_set_plane::src_x"]
        [::std::mem::offset_of!(drm_mode_set_plane, src_x) - 32usize];
    ["Offset of field: drm_mode_set_plane::src_y"]
        [::std::mem::offset_of!(drm_mode_set_plane, src_y) - 36usize];
    ["Offset of field: drm_mode_set_plane::src_h"]
        [::std::mem::offset_of!(drm_mode_set_plane, src_h) - 40usize];
    ["Offset of field: drm_mode_set_plane::src_w"]
        [::std::mem::offset_of!(drm_mode_set_plane, src_w) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_plane {
    pub plane_id: __u32,
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub possible_crtcs: __u32,
    pub gamma_size: __u32,
    pub count_format_types: __u32,
    pub format_type_ptr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_get_plane"][::std::mem::size_of::<drm_mode_get_plane>() - 32usize];
    ["Alignment of drm_mode_get_plane"][::std::mem::align_of::<drm_mode_get_plane>() - 8usize];
    ["Offset of field: drm_mode_get_plane::plane_id"]
        [::std::mem::offset_of!(drm_mode_get_plane, plane_id) - 0usize];
    ["Offset of field: drm_mode_get_plane::crtc_id"]
        [::std::mem::offset_of!(drm_mode_get_plane, crtc_id) - 4usize];
    ["Offset of field: drm_mode_get_plane::fb_id"]
        [::std::mem::offset_of!(drm_mode_get_plane, fb_id) - 8usize];
    ["Offset of field: drm_mode_get_plane::possible_crtcs"]
        [::std::mem::offset_of!(drm_mode_get_plane, possible_crtcs) - 12usize];
    ["Offset of field: drm_mode_get_plane::gamma_size"]
        [::std::mem::offset_of!(drm_mode_get_plane, gamma_size) - 16usize];
    ["Offset of field: drm_mode_get_plane::count_format_types"]
        [::std::mem::offset_of!(drm_mode_get_plane, count_format_types) - 20usize];
    ["Offset of field: drm_mode_get_plane::format_type_ptr"]
        [::std::mem::offset_of!(drm_mode_get_plane, format_type_ptr) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_plane_res {
    pub plane_id_ptr: __u64,
    pub count_planes: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_get_plane_res"][::std::mem::size_of::<drm_mode_get_plane_res>() - 16usize];
    ["Alignment of drm_mode_get_plane_res"]
        [::std::mem::align_of::<drm_mode_get_plane_res>() - 8usize];
    ["Offset of field: drm_mode_get_plane_res::plane_id_ptr"]
        [::std::mem::offset_of!(drm_mode_get_plane_res, plane_id_ptr) - 0usize];
    ["Offset of field: drm_mode_get_plane_res::count_planes"]
        [::std::mem::offset_of!(drm_mode_get_plane_res, count_planes) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_encoder {
    pub encoder_id: __u32,
    pub encoder_type: __u32,
    pub crtc_id: __u32,
    pub possible_crtcs: __u32,
    pub possible_clones: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_get_encoder"][::std::mem::size_of::<drm_mode_get_encoder>() - 20usize];
    ["Alignment of drm_mode_get_encoder"][::std::mem::align_of::<drm_mode_get_encoder>() - 4usize];
    ["Offset of field: drm_mode_get_encoder::encoder_id"]
        [::std::mem::offset_of!(drm_mode_get_encoder, encoder_id) - 0usize];
    ["Offset of field: drm_mode_get_encoder::encoder_type"]
        [::std::mem::offset_of!(drm_mode_get_encoder, encoder_type) - 4usize];
    ["Offset of field: drm_mode_get_encoder::crtc_id"]
        [::std::mem::offset_of!(drm_mode_get_encoder, crtc_id) - 8usize];
    ["Offset of field: drm_mode_get_encoder::possible_crtcs"]
        [::std::mem::offset_of!(drm_mode_get_encoder, possible_crtcs) - 12usize];
    ["Offset of field: drm_mode_get_encoder::possible_clones"]
        [::std::mem::offset_of!(drm_mode_get_encoder, possible_clones) - 16usize];
};
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Automatic: drm_mode_subconnector = 0;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Unknown: drm_mode_subconnector = 0;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_VGA: drm_mode_subconnector = 1;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_DVID: drm_mode_subconnector = 3;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_DVIA: drm_mode_subconnector = 4;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Composite: drm_mode_subconnector = 5;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_SVIDEO: drm_mode_subconnector = 6;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Component: drm_mode_subconnector = 8;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_SCART: drm_mode_subconnector = 9;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_DisplayPort: drm_mode_subconnector = 10;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_HDMIA: drm_mode_subconnector = 11;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Native: drm_mode_subconnector = 15;
pub const drm_mode_subconnector_DRM_MODE_SUBCONNECTOR_Wireless: drm_mode_subconnector = 18;
pub type drm_mode_subconnector = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_connector {
    pub encoders_ptr: __u64,
    pub modes_ptr: __u64,
    pub props_ptr: __u64,
    pub prop_values_ptr: __u64,
    pub count_modes: __u32,
    pub count_props: __u32,
    pub count_encoders: __u32,
    pub encoder_id: __u32,
    pub connector_id: __u32,
    pub connector_type: __u32,
    pub connector_type_id: __u32,
    pub connection: __u32,
    pub mm_width: __u32,
    pub mm_height: __u32,
    pub subpixel: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_get_connector"][::std::mem::size_of::<drm_mode_get_connector>() - 80usize];
    ["Alignment of drm_mode_get_connector"]
        [::std::mem::align_of::<drm_mode_get_connector>() - 8usize];
    ["Offset of field: drm_mode_get_connector::encoders_ptr"]
        [::std::mem::offset_of!(drm_mode_get_connector, encoders_ptr) - 0usize];
    ["Offset of field: drm_mode_get_connector::modes_ptr"]
        [::std::mem::offset_of!(drm_mode_get_connector, modes_ptr) - 8usize];
    ["Offset of field: drm_mode_get_connector::props_ptr"]
        [::std::mem::offset_of!(drm_mode_get_connector, props_ptr) - 16usize];
    ["Offset of field: drm_mode_get_connector::prop_values_ptr"]
        [::std::mem::offset_of!(drm_mode_get_connector, prop_values_ptr) - 24usize];
    ["Offset of field: drm_mode_get_connector::count_modes"]
        [::std::mem::offset_of!(drm_mode_get_connector, count_modes) - 32usize];
    ["Offset of field: drm_mode_get_connector::count_props"]
        [::std::mem::offset_of!(drm_mode_get_connector, count_props) - 36usize];
    ["Offset of field: drm_mode_get_connector::count_encoders"]
        [::std::mem::offset_of!(drm_mode_get_connector, count_encoders) - 40usize];
    ["Offset of field: drm_mode_get_connector::encoder_id"]
        [::std::mem::offset_of!(drm_mode_get_connector, encoder_id) - 44usize];
    ["Offset of field: drm_mode_get_connector::connector_id"]
        [::std::mem::offset_of!(drm_mode_get_connector, connector_id) - 48usize];
    ["Offset of field: drm_mode_get_connector::connector_type"]
        [::std::mem::offset_of!(drm_mode_get_connector, connector_type) - 52usize];
    ["Offset of field: drm_mode_get_connector::connector_type_id"]
        [::std::mem::offset_of!(drm_mode_get_connector, connector_type_id) - 56usize];
    ["Offset of field: drm_mode_get_connector::connection"]
        [::std::mem::offset_of!(drm_mode_get_connector, connection) - 60usize];
    ["Offset of field: drm_mode_get_connector::mm_width"]
        [::std::mem::offset_of!(drm_mode_get_connector, mm_width) - 64usize];
    ["Offset of field: drm_mode_get_connector::mm_height"]
        [::std::mem::offset_of!(drm_mode_get_connector, mm_height) - 68usize];
    ["Offset of field: drm_mode_get_connector::subpixel"]
        [::std::mem::offset_of!(drm_mode_get_connector, subpixel) - 72usize];
    ["Offset of field: drm_mode_get_connector::pad"]
        [::std::mem::offset_of!(drm_mode_get_connector, pad) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_property_enum {
    pub value: __u64,
    pub name: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_property_enum"][::std::mem::size_of::<drm_mode_property_enum>() - 40usize];
    ["Alignment of drm_mode_property_enum"]
        [::std::mem::align_of::<drm_mode_property_enum>() - 8usize];
    ["Offset of field: drm_mode_property_enum::value"]
        [::std::mem::offset_of!(drm_mode_property_enum, value) - 0usize];
    ["Offset of field: drm_mode_property_enum::name"]
        [::std::mem::offset_of!(drm_mode_property_enum, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_property {
    pub values_ptr: __u64,
    pub enum_blob_ptr: __u64,
    pub prop_id: __u32,
    pub flags: __u32,
    pub name: [::std::os::raw::c_char; 32usize],
    pub count_values: __u32,
    pub count_enum_blobs: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_get_property"][::std::mem::size_of::<drm_mode_get_property>() - 64usize];
    ["Alignment of drm_mode_get_property"]
        [::std::mem::align_of::<drm_mode_get_property>() - 8usize];
    ["Offset of field: drm_mode_get_property::values_ptr"]
        [::std::mem::offset_of!(drm_mode_get_property, values_ptr) - 0usize];
    ["Offset of field: drm_mode_get_property::enum_blob_ptr"]
        [::std::mem::offset_of!(drm_mode_get_property, enum_blob_ptr) - 8usize];
    ["Offset of field: drm_mode_get_property::prop_id"]
        [::std::mem::offset_of!(drm_mode_get_property, prop_id) - 16usize];
    ["Offset of field: drm_mode_get_property::flags"]
        [::std::mem::offset_of!(drm_mode_get_property, flags) - 20usize];
    ["Offset of field: drm_mode_get_property::name"]
        [::std::mem::offset_of!(drm_mode_get_property, name) - 24usize];
    ["Offset of field: drm_mode_get_property::count_values"]
        [::std::mem::offset_of!(drm_mode_get_property, count_values) - 56usize];
    ["Offset of field: drm_mode_get_property::count_enum_blobs"]
        [::std::mem::offset_of!(drm_mode_get_property, count_enum_blobs) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_connector_set_property {
    pub value: __u64,
    pub prop_id: __u32,
    pub connector_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_connector_set_property"]
        [::std::mem::size_of::<drm_mode_connector_set_property>() - 16usize];
    ["Alignment of drm_mode_connector_set_property"]
        [::std::mem::align_of::<drm_mode_connector_set_property>() - 8usize];
    ["Offset of field: drm_mode_connector_set_property::value"]
        [::std::mem::offset_of!(drm_mode_connector_set_property, value) - 0usize];
    ["Offset of field: drm_mode_connector_set_property::prop_id"]
        [::std::mem::offset_of!(drm_mode_connector_set_property, prop_id) - 8usize];
    ["Offset of field: drm_mode_connector_set_property::connector_id"]
        [::std::mem::offset_of!(drm_mode_connector_set_property, connector_id) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_obj_get_properties {
    pub props_ptr: __u64,
    pub prop_values_ptr: __u64,
    pub count_props: __u32,
    pub obj_id: __u32,
    pub obj_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_obj_get_properties"]
        [::std::mem::size_of::<drm_mode_obj_get_properties>() - 32usize];
    ["Alignment of drm_mode_obj_get_properties"]
        [::std::mem::align_of::<drm_mode_obj_get_properties>() - 8usize];
    ["Offset of field: drm_mode_obj_get_properties::props_ptr"]
        [::std::mem::offset_of!(drm_mode_obj_get_properties, props_ptr) - 0usize];
    ["Offset of field: drm_mode_obj_get_properties::prop_values_ptr"]
        [::std::mem::offset_of!(drm_mode_obj_get_properties, prop_values_ptr) - 8usize];
    ["Offset of field: drm_mode_obj_get_properties::count_props"]
        [::std::mem::offset_of!(drm_mode_obj_get_properties, count_props) - 16usize];
    ["Offset of field: drm_mode_obj_get_properties::obj_id"]
        [::std::mem::offset_of!(drm_mode_obj_get_properties, obj_id) - 20usize];
    ["Offset of field: drm_mode_obj_get_properties::obj_type"]
        [::std::mem::offset_of!(drm_mode_obj_get_properties, obj_type) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_obj_set_property {
    pub value: __u64,
    pub prop_id: __u32,
    pub obj_id: __u32,
    pub obj_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_obj_set_property"]
        [::std::mem::size_of::<drm_mode_obj_set_property>() - 24usize];
    ["Alignment of drm_mode_obj_set_property"]
        [::std::mem::align_of::<drm_mode_obj_set_property>() - 8usize];
    ["Offset of field: drm_mode_obj_set_property::value"]
        [::std::mem::offset_of!(drm_mode_obj_set_property, value) - 0usize];
    ["Offset of field: drm_mode_obj_set_property::prop_id"]
        [::std::mem::offset_of!(drm_mode_obj_set_property, prop_id) - 8usize];
    ["Offset of field: drm_mode_obj_set_property::obj_id"]
        [::std::mem::offset_of!(drm_mode_obj_set_property, obj_id) - 12usize];
    ["Offset of field: drm_mode_obj_set_property::obj_type"]
        [::std::mem::offset_of!(drm_mode_obj_set_property, obj_type) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_blob {
    pub blob_id: __u32,
    pub length: __u32,
    pub data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_get_blob"][::std::mem::size_of::<drm_mode_get_blob>() - 16usize];
    ["Alignment of drm_mode_get_blob"][::std::mem::align_of::<drm_mode_get_blob>() - 8usize];
    ["Offset of field: drm_mode_get_blob::blob_id"]
        [::std::mem::offset_of!(drm_mode_get_blob, blob_id) - 0usize];
    ["Offset of field: drm_mode_get_blob::length"]
        [::std::mem::offset_of!(drm_mode_get_blob, length) - 4usize];
    ["Offset of field: drm_mode_get_blob::data"]
        [::std::mem::offset_of!(drm_mode_get_blob, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_cmd {
    pub fb_id: __u32,
    pub width: __u32,
    pub height: __u32,
    pub pitch: __u32,
    pub bpp: __u32,
    pub depth: __u32,
    pub handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_fb_cmd"][::std::mem::size_of::<drm_mode_fb_cmd>() - 28usize];
    ["Alignment of drm_mode_fb_cmd"][::std::mem::align_of::<drm_mode_fb_cmd>() - 4usize];
    ["Offset of field: drm_mode_fb_cmd::fb_id"]
        [::std::mem::offset_of!(drm_mode_fb_cmd, fb_id) - 0usize];
    ["Offset of field: drm_mode_fb_cmd::width"]
        [::std::mem::offset_of!(drm_mode_fb_cmd, width) - 4usize];
    ["Offset of field: drm_mode_fb_cmd::height"]
        [::std::mem::offset_of!(drm_mode_fb_cmd, height) - 8usize];
    ["Offset of field: drm_mode_fb_cmd::pitch"]
        [::std::mem::offset_of!(drm_mode_fb_cmd, pitch) - 12usize];
    ["Offset of field: drm_mode_fb_cmd::bpp"]
        [::std::mem::offset_of!(drm_mode_fb_cmd, bpp) - 16usize];
    ["Offset of field: drm_mode_fb_cmd::depth"]
        [::std::mem::offset_of!(drm_mode_fb_cmd, depth) - 20usize];
    ["Offset of field: drm_mode_fb_cmd::handle"]
        [::std::mem::offset_of!(drm_mode_fb_cmd, handle) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_cmd2 {
    pub fb_id: __u32,
    pub width: __u32,
    pub height: __u32,
    pub pixel_format: __u32,
    pub flags: __u32,
    pub handles: [__u32; 4usize],
    pub pitches: [__u32; 4usize],
    pub offsets: [__u32; 4usize],
    pub modifier: [__u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_fb_cmd2"][::std::mem::size_of::<drm_mode_fb_cmd2>() - 104usize];
    ["Alignment of drm_mode_fb_cmd2"][::std::mem::align_of::<drm_mode_fb_cmd2>() - 8usize];
    ["Offset of field: drm_mode_fb_cmd2::fb_id"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, fb_id) - 0usize];
    ["Offset of field: drm_mode_fb_cmd2::width"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, width) - 4usize];
    ["Offset of field: drm_mode_fb_cmd2::height"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, height) - 8usize];
    ["Offset of field: drm_mode_fb_cmd2::pixel_format"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, pixel_format) - 12usize];
    ["Offset of field: drm_mode_fb_cmd2::flags"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, flags) - 16usize];
    ["Offset of field: drm_mode_fb_cmd2::handles"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, handles) - 20usize];
    ["Offset of field: drm_mode_fb_cmd2::pitches"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, pitches) - 36usize];
    ["Offset of field: drm_mode_fb_cmd2::offsets"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, offsets) - 52usize];
    ["Offset of field: drm_mode_fb_cmd2::modifier"]
        [::std::mem::offset_of!(drm_mode_fb_cmd2, modifier) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_fb_dirty_cmd {
    pub fb_id: __u32,
    pub flags: __u32,
    pub color: __u32,
    pub num_clips: __u32,
    pub clips_ptr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_fb_dirty_cmd"][::std::mem::size_of::<drm_mode_fb_dirty_cmd>() - 24usize];
    ["Alignment of drm_mode_fb_dirty_cmd"]
        [::std::mem::align_of::<drm_mode_fb_dirty_cmd>() - 8usize];
    ["Offset of field: drm_mode_fb_dirty_cmd::fb_id"]
        [::std::mem::offset_of!(drm_mode_fb_dirty_cmd, fb_id) - 0usize];
    ["Offset of field: drm_mode_fb_dirty_cmd::flags"]
        [::std::mem::offset_of!(drm_mode_fb_dirty_cmd, flags) - 4usize];
    ["Offset of field: drm_mode_fb_dirty_cmd::color"]
        [::std::mem::offset_of!(drm_mode_fb_dirty_cmd, color) - 8usize];
    ["Offset of field: drm_mode_fb_dirty_cmd::num_clips"]
        [::std::mem::offset_of!(drm_mode_fb_dirty_cmd, num_clips) - 12usize];
    ["Offset of field: drm_mode_fb_dirty_cmd::clips_ptr"]
        [::std::mem::offset_of!(drm_mode_fb_dirty_cmd, clips_ptr) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_mode_cmd {
    pub connector_id: __u32,
    pub mode: drm_mode_modeinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_mode_cmd"][::std::mem::size_of::<drm_mode_mode_cmd>() - 72usize];
    ["Alignment of drm_mode_mode_cmd"][::std::mem::align_of::<drm_mode_mode_cmd>() - 4usize];
    ["Offset of field: drm_mode_mode_cmd::connector_id"]
        [::std::mem::offset_of!(drm_mode_mode_cmd, connector_id) - 0usize];
    ["Offset of field: drm_mode_mode_cmd::mode"]
        [::std::mem::offset_of!(drm_mode_mode_cmd, mode) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_cursor {
    pub flags: __u32,
    pub crtc_id: __u32,
    pub x: __s32,
    pub y: __s32,
    pub width: __u32,
    pub height: __u32,
    pub handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_cursor"][::std::mem::size_of::<drm_mode_cursor>() - 28usize];
    ["Alignment of drm_mode_cursor"][::std::mem::align_of::<drm_mode_cursor>() - 4usize];
    ["Offset of field: drm_mode_cursor::flags"]
        [::std::mem::offset_of!(drm_mode_cursor, flags) - 0usize];
    ["Offset of field: drm_mode_cursor::crtc_id"]
        [::std::mem::offset_of!(drm_mode_cursor, crtc_id) - 4usize];
    ["Offset of field: drm_mode_cursor::x"][::std::mem::offset_of!(drm_mode_cursor, x) - 8usize];
    ["Offset of field: drm_mode_cursor::y"][::std::mem::offset_of!(drm_mode_cursor, y) - 12usize];
    ["Offset of field: drm_mode_cursor::width"]
        [::std::mem::offset_of!(drm_mode_cursor, width) - 16usize];
    ["Offset of field: drm_mode_cursor::height"]
        [::std::mem::offset_of!(drm_mode_cursor, height) - 20usize];
    ["Offset of field: drm_mode_cursor::handle"]
        [::std::mem::offset_of!(drm_mode_cursor, handle) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_cursor2 {
    pub flags: __u32,
    pub crtc_id: __u32,
    pub x: __s32,
    pub y: __s32,
    pub width: __u32,
    pub height: __u32,
    pub handle: __u32,
    pub hot_x: __s32,
    pub hot_y: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_cursor2"][::std::mem::size_of::<drm_mode_cursor2>() - 36usize];
    ["Alignment of drm_mode_cursor2"][::std::mem::align_of::<drm_mode_cursor2>() - 4usize];
    ["Offset of field: drm_mode_cursor2::flags"]
        [::std::mem::offset_of!(drm_mode_cursor2, flags) - 0usize];
    ["Offset of field: drm_mode_cursor2::crtc_id"]
        [::std::mem::offset_of!(drm_mode_cursor2, crtc_id) - 4usize];
    ["Offset of field: drm_mode_cursor2::x"][::std::mem::offset_of!(drm_mode_cursor2, x) - 8usize];
    ["Offset of field: drm_mode_cursor2::y"][::std::mem::offset_of!(drm_mode_cursor2, y) - 12usize];
    ["Offset of field: drm_mode_cursor2::width"]
        [::std::mem::offset_of!(drm_mode_cursor2, width) - 16usize];
    ["Offset of field: drm_mode_cursor2::height"]
        [::std::mem::offset_of!(drm_mode_cursor2, height) - 20usize];
    ["Offset of field: drm_mode_cursor2::handle"]
        [::std::mem::offset_of!(drm_mode_cursor2, handle) - 24usize];
    ["Offset of field: drm_mode_cursor2::hot_x"]
        [::std::mem::offset_of!(drm_mode_cursor2, hot_x) - 28usize];
    ["Offset of field: drm_mode_cursor2::hot_y"]
        [::std::mem::offset_of!(drm_mode_cursor2, hot_y) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_lut {
    pub crtc_id: __u32,
    pub gamma_size: __u32,
    pub red: __u64,
    pub green: __u64,
    pub blue: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_crtc_lut"][::std::mem::size_of::<drm_mode_crtc_lut>() - 32usize];
    ["Alignment of drm_mode_crtc_lut"][::std::mem::align_of::<drm_mode_crtc_lut>() - 8usize];
    ["Offset of field: drm_mode_crtc_lut::crtc_id"]
        [::std::mem::offset_of!(drm_mode_crtc_lut, crtc_id) - 0usize];
    ["Offset of field: drm_mode_crtc_lut::gamma_size"]
        [::std::mem::offset_of!(drm_mode_crtc_lut, gamma_size) - 4usize];
    ["Offset of field: drm_mode_crtc_lut::red"]
        [::std::mem::offset_of!(drm_mode_crtc_lut, red) - 8usize];
    ["Offset of field: drm_mode_crtc_lut::green"]
        [::std::mem::offset_of!(drm_mode_crtc_lut, green) - 16usize];
    ["Offset of field: drm_mode_crtc_lut::blue"]
        [::std::mem::offset_of!(drm_mode_crtc_lut, blue) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_color_ctm {
    pub matrix: [__u64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_color_ctm"][::std::mem::size_of::<drm_color_ctm>() - 72usize];
    ["Alignment of drm_color_ctm"][::std::mem::align_of::<drm_color_ctm>() - 8usize];
    ["Offset of field: drm_color_ctm::matrix"]
        [::std::mem::offset_of!(drm_color_ctm, matrix) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_color_lut {
    pub red: __u16,
    pub green: __u16,
    pub blue: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_color_lut"][::std::mem::size_of::<drm_color_lut>() - 8usize];
    ["Alignment of drm_color_lut"][::std::mem::align_of::<drm_color_lut>() - 2usize];
    ["Offset of field: drm_color_lut::red"][::std::mem::offset_of!(drm_color_lut, red) - 0usize];
    ["Offset of field: drm_color_lut::green"]
        [::std::mem::offset_of!(drm_color_lut, green) - 2usize];
    ["Offset of field: drm_color_lut::blue"][::std::mem::offset_of!(drm_color_lut, blue) - 4usize];
    ["Offset of field: drm_color_lut::reserved"]
        [::std::mem::offset_of!(drm_color_lut, reserved) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe {
    pub eotf: __u8,
    pub metadata_type: __u8,
    pub display_primaries: [hdr_metadata_infoframe__bindgen_ty_1; 3usize],
    pub white_point: hdr_metadata_infoframe__bindgen_ty_2,
    pub max_display_mastering_luminance: __u16,
    pub min_display_mastering_luminance: __u16,
    pub max_cll: __u16,
    pub max_fall: __u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe__bindgen_ty_1 {
    pub x: __u16,
    pub y: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdr_metadata_infoframe__bindgen_ty_1"]
        [::std::mem::size_of::<hdr_metadata_infoframe__bindgen_ty_1>() - 4usize];
    ["Alignment of hdr_metadata_infoframe__bindgen_ty_1"]
        [::std::mem::align_of::<hdr_metadata_infoframe__bindgen_ty_1>() - 2usize];
    ["Offset of field: hdr_metadata_infoframe__bindgen_ty_1::x"]
        [::std::mem::offset_of!(hdr_metadata_infoframe__bindgen_ty_1, x) - 0usize];
    ["Offset of field: hdr_metadata_infoframe__bindgen_ty_1::y"]
        [::std::mem::offset_of!(hdr_metadata_infoframe__bindgen_ty_1, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hdr_metadata_infoframe__bindgen_ty_2 {
    pub x: __u16,
    pub y: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdr_metadata_infoframe__bindgen_ty_2"]
        [::std::mem::size_of::<hdr_metadata_infoframe__bindgen_ty_2>() - 4usize];
    ["Alignment of hdr_metadata_infoframe__bindgen_ty_2"]
        [::std::mem::align_of::<hdr_metadata_infoframe__bindgen_ty_2>() - 2usize];
    ["Offset of field: hdr_metadata_infoframe__bindgen_ty_2::x"]
        [::std::mem::offset_of!(hdr_metadata_infoframe__bindgen_ty_2, x) - 0usize];
    ["Offset of field: hdr_metadata_infoframe__bindgen_ty_2::y"]
        [::std::mem::offset_of!(hdr_metadata_infoframe__bindgen_ty_2, y) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdr_metadata_infoframe"][::std::mem::size_of::<hdr_metadata_infoframe>() - 26usize];
    ["Alignment of hdr_metadata_infoframe"]
        [::std::mem::align_of::<hdr_metadata_infoframe>() - 2usize];
    ["Offset of field: hdr_metadata_infoframe::eotf"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, eotf) - 0usize];
    ["Offset of field: hdr_metadata_infoframe::metadata_type"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, metadata_type) - 1usize];
    ["Offset of field: hdr_metadata_infoframe::display_primaries"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, display_primaries) - 2usize];
    ["Offset of field: hdr_metadata_infoframe::white_point"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, white_point) - 14usize];
    ["Offset of field: hdr_metadata_infoframe::max_display_mastering_luminance"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, max_display_mastering_luminance) - 18usize];
    ["Offset of field: hdr_metadata_infoframe::min_display_mastering_luminance"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, min_display_mastering_luminance) - 20usize];
    ["Offset of field: hdr_metadata_infoframe::max_cll"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, max_cll) - 22usize];
    ["Offset of field: hdr_metadata_infoframe::max_fall"]
        [::std::mem::offset_of!(hdr_metadata_infoframe, max_fall) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hdr_output_metadata {
    pub metadata_type: __u32,
    pub __bindgen_anon_1: hdr_output_metadata__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hdr_output_metadata__bindgen_ty_1 {
    pub hdmi_metadata_type1: hdr_metadata_infoframe,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdr_output_metadata__bindgen_ty_1"]
        [::std::mem::size_of::<hdr_output_metadata__bindgen_ty_1>() - 26usize];
    ["Alignment of hdr_output_metadata__bindgen_ty_1"]
        [::std::mem::align_of::<hdr_output_metadata__bindgen_ty_1>() - 2usize];
    ["Offset of field: hdr_output_metadata__bindgen_ty_1::hdmi_metadata_type1"]
        [::std::mem::offset_of!(hdr_output_metadata__bindgen_ty_1, hdmi_metadata_type1) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hdr_output_metadata"][::std::mem::size_of::<hdr_output_metadata>() - 32usize];
    ["Alignment of hdr_output_metadata"][::std::mem::align_of::<hdr_output_metadata>() - 4usize];
    ["Offset of field: hdr_output_metadata::metadata_type"]
        [::std::mem::offset_of!(hdr_output_metadata, metadata_type) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_page_flip {
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub flags: __u32,
    pub reserved: __u32,
    pub user_data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_crtc_page_flip"][::std::mem::size_of::<drm_mode_crtc_page_flip>() - 24usize];
    ["Alignment of drm_mode_crtc_page_flip"]
        [::std::mem::align_of::<drm_mode_crtc_page_flip>() - 8usize];
    ["Offset of field: drm_mode_crtc_page_flip::crtc_id"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip, crtc_id) - 0usize];
    ["Offset of field: drm_mode_crtc_page_flip::fb_id"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip, fb_id) - 4usize];
    ["Offset of field: drm_mode_crtc_page_flip::flags"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip, flags) - 8usize];
    ["Offset of field: drm_mode_crtc_page_flip::reserved"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip, reserved) - 12usize];
    ["Offset of field: drm_mode_crtc_page_flip::user_data"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip, user_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_crtc_page_flip_target {
    pub crtc_id: __u32,
    pub fb_id: __u32,
    pub flags: __u32,
    pub sequence: __u32,
    pub user_data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_crtc_page_flip_target"]
        [::std::mem::size_of::<drm_mode_crtc_page_flip_target>() - 24usize];
    ["Alignment of drm_mode_crtc_page_flip_target"]
        [::std::mem::align_of::<drm_mode_crtc_page_flip_target>() - 8usize];
    ["Offset of field: drm_mode_crtc_page_flip_target::crtc_id"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip_target, crtc_id) - 0usize];
    ["Offset of field: drm_mode_crtc_page_flip_target::fb_id"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip_target, fb_id) - 4usize];
    ["Offset of field: drm_mode_crtc_page_flip_target::flags"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip_target, flags) - 8usize];
    ["Offset of field: drm_mode_crtc_page_flip_target::sequence"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip_target, sequence) - 12usize];
    ["Offset of field: drm_mode_crtc_page_flip_target::user_data"]
        [::std::mem::offset_of!(drm_mode_crtc_page_flip_target, user_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_dumb {
    pub height: __u32,
    pub width: __u32,
    pub bpp: __u32,
    pub flags: __u32,
    pub handle: __u32,
    pub pitch: __u32,
    pub size: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_create_dumb"][::std::mem::size_of::<drm_mode_create_dumb>() - 32usize];
    ["Alignment of drm_mode_create_dumb"][::std::mem::align_of::<drm_mode_create_dumb>() - 8usize];
    ["Offset of field: drm_mode_create_dumb::height"]
        [::std::mem::offset_of!(drm_mode_create_dumb, height) - 0usize];
    ["Offset of field: drm_mode_create_dumb::width"]
        [::std::mem::offset_of!(drm_mode_create_dumb, width) - 4usize];
    ["Offset of field: drm_mode_create_dumb::bpp"]
        [::std::mem::offset_of!(drm_mode_create_dumb, bpp) - 8usize];
    ["Offset of field: drm_mode_create_dumb::flags"]
        [::std::mem::offset_of!(drm_mode_create_dumb, flags) - 12usize];
    ["Offset of field: drm_mode_create_dumb::handle"]
        [::std::mem::offset_of!(drm_mode_create_dumb, handle) - 16usize];
    ["Offset of field: drm_mode_create_dumb::pitch"]
        [::std::mem::offset_of!(drm_mode_create_dumb, pitch) - 20usize];
    ["Offset of field: drm_mode_create_dumb::size"]
        [::std::mem::offset_of!(drm_mode_create_dumb, size) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_map_dumb {
    pub handle: __u32,
    pub pad: __u32,
    pub offset: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_map_dumb"][::std::mem::size_of::<drm_mode_map_dumb>() - 16usize];
    ["Alignment of drm_mode_map_dumb"][::std::mem::align_of::<drm_mode_map_dumb>() - 8usize];
    ["Offset of field: drm_mode_map_dumb::handle"]
        [::std::mem::offset_of!(drm_mode_map_dumb, handle) - 0usize];
    ["Offset of field: drm_mode_map_dumb::pad"]
        [::std::mem::offset_of!(drm_mode_map_dumb, pad) - 4usize];
    ["Offset of field: drm_mode_map_dumb::offset"]
        [::std::mem::offset_of!(drm_mode_map_dumb, offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_destroy_dumb {
    pub handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_destroy_dumb"][::std::mem::size_of::<drm_mode_destroy_dumb>() - 4usize];
    ["Alignment of drm_mode_destroy_dumb"]
        [::std::mem::align_of::<drm_mode_destroy_dumb>() - 4usize];
    ["Offset of field: drm_mode_destroy_dumb::handle"]
        [::std::mem::offset_of!(drm_mode_destroy_dumb, handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_atomic {
    pub flags: __u32,
    pub count_objs: __u32,
    pub objs_ptr: __u64,
    pub count_props_ptr: __u64,
    pub props_ptr: __u64,
    pub prop_values_ptr: __u64,
    pub reserved: __u64,
    pub user_data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_atomic"][::std::mem::size_of::<drm_mode_atomic>() - 56usize];
    ["Alignment of drm_mode_atomic"][::std::mem::align_of::<drm_mode_atomic>() - 8usize];
    ["Offset of field: drm_mode_atomic::flags"]
        [::std::mem::offset_of!(drm_mode_atomic, flags) - 0usize];
    ["Offset of field: drm_mode_atomic::count_objs"]
        [::std::mem::offset_of!(drm_mode_atomic, count_objs) - 4usize];
    ["Offset of field: drm_mode_atomic::objs_ptr"]
        [::std::mem::offset_of!(drm_mode_atomic, objs_ptr) - 8usize];
    ["Offset of field: drm_mode_atomic::count_props_ptr"]
        [::std::mem::offset_of!(drm_mode_atomic, count_props_ptr) - 16usize];
    ["Offset of field: drm_mode_atomic::props_ptr"]
        [::std::mem::offset_of!(drm_mode_atomic, props_ptr) - 24usize];
    ["Offset of field: drm_mode_atomic::prop_values_ptr"]
        [::std::mem::offset_of!(drm_mode_atomic, prop_values_ptr) - 32usize];
    ["Offset of field: drm_mode_atomic::reserved"]
        [::std::mem::offset_of!(drm_mode_atomic, reserved) - 40usize];
    ["Offset of field: drm_mode_atomic::user_data"]
        [::std::mem::offset_of!(drm_mode_atomic, user_data) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_format_modifier_blob {
    pub version: __u32,
    pub flags: __u32,
    pub count_formats: __u32,
    pub formats_offset: __u32,
    pub count_modifiers: __u32,
    pub modifiers_offset: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_format_modifier_blob"]
        [::std::mem::size_of::<drm_format_modifier_blob>() - 24usize];
    ["Alignment of drm_format_modifier_blob"]
        [::std::mem::align_of::<drm_format_modifier_blob>() - 4usize];
    ["Offset of field: drm_format_modifier_blob::version"]
        [::std::mem::offset_of!(drm_format_modifier_blob, version) - 0usize];
    ["Offset of field: drm_format_modifier_blob::flags"]
        [::std::mem::offset_of!(drm_format_modifier_blob, flags) - 4usize];
    ["Offset of field: drm_format_modifier_blob::count_formats"]
        [::std::mem::offset_of!(drm_format_modifier_blob, count_formats) - 8usize];
    ["Offset of field: drm_format_modifier_blob::formats_offset"]
        [::std::mem::offset_of!(drm_format_modifier_blob, formats_offset) - 12usize];
    ["Offset of field: drm_format_modifier_blob::count_modifiers"]
        [::std::mem::offset_of!(drm_format_modifier_blob, count_modifiers) - 16usize];
    ["Offset of field: drm_format_modifier_blob::modifiers_offset"]
        [::std::mem::offset_of!(drm_format_modifier_blob, modifiers_offset) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_format_modifier {
    pub formats: __u64,
    pub offset: __u32,
    pub pad: __u32,
    pub modifier: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_format_modifier"][::std::mem::size_of::<drm_format_modifier>() - 24usize];
    ["Alignment of drm_format_modifier"][::std::mem::align_of::<drm_format_modifier>() - 8usize];
    ["Offset of field: drm_format_modifier::formats"]
        [::std::mem::offset_of!(drm_format_modifier, formats) - 0usize];
    ["Offset of field: drm_format_modifier::offset"]
        [::std::mem::offset_of!(drm_format_modifier, offset) - 8usize];
    ["Offset of field: drm_format_modifier::pad"]
        [::std::mem::offset_of!(drm_format_modifier, pad) - 12usize];
    ["Offset of field: drm_format_modifier::modifier"]
        [::std::mem::offset_of!(drm_format_modifier, modifier) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_blob {
    pub data: __u64,
    pub length: __u32,
    pub blob_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_create_blob"][::std::mem::size_of::<drm_mode_create_blob>() - 16usize];
    ["Alignment of drm_mode_create_blob"][::std::mem::align_of::<drm_mode_create_blob>() - 8usize];
    ["Offset of field: drm_mode_create_blob::data"]
        [::std::mem::offset_of!(drm_mode_create_blob, data) - 0usize];
    ["Offset of field: drm_mode_create_blob::length"]
        [::std::mem::offset_of!(drm_mode_create_blob, length) - 8usize];
    ["Offset of field: drm_mode_create_blob::blob_id"]
        [::std::mem::offset_of!(drm_mode_create_blob, blob_id) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_destroy_blob {
    pub blob_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_destroy_blob"][::std::mem::size_of::<drm_mode_destroy_blob>() - 4usize];
    ["Alignment of drm_mode_destroy_blob"]
        [::std::mem::align_of::<drm_mode_destroy_blob>() - 4usize];
    ["Offset of field: drm_mode_destroy_blob::blob_id"]
        [::std::mem::offset_of!(drm_mode_destroy_blob, blob_id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_create_lease {
    pub object_ids: __u64,
    pub object_count: __u32,
    pub flags: __u32,
    pub lessee_id: __u32,
    pub fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_create_lease"][::std::mem::size_of::<drm_mode_create_lease>() - 24usize];
    ["Alignment of drm_mode_create_lease"]
        [::std::mem::align_of::<drm_mode_create_lease>() - 8usize];
    ["Offset of field: drm_mode_create_lease::object_ids"]
        [::std::mem::offset_of!(drm_mode_create_lease, object_ids) - 0usize];
    ["Offset of field: drm_mode_create_lease::object_count"]
        [::std::mem::offset_of!(drm_mode_create_lease, object_count) - 8usize];
    ["Offset of field: drm_mode_create_lease::flags"]
        [::std::mem::offset_of!(drm_mode_create_lease, flags) - 12usize];
    ["Offset of field: drm_mode_create_lease::lessee_id"]
        [::std::mem::offset_of!(drm_mode_create_lease, lessee_id) - 16usize];
    ["Offset of field: drm_mode_create_lease::fd"]
        [::std::mem::offset_of!(drm_mode_create_lease, fd) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_list_lessees {
    pub count_lessees: __u32,
    pub pad: __u32,
    pub lessees_ptr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_list_lessees"][::std::mem::size_of::<drm_mode_list_lessees>() - 16usize];
    ["Alignment of drm_mode_list_lessees"]
        [::std::mem::align_of::<drm_mode_list_lessees>() - 8usize];
    ["Offset of field: drm_mode_list_lessees::count_lessees"]
        [::std::mem::offset_of!(drm_mode_list_lessees, count_lessees) - 0usize];
    ["Offset of field: drm_mode_list_lessees::pad"]
        [::std::mem::offset_of!(drm_mode_list_lessees, pad) - 4usize];
    ["Offset of field: drm_mode_list_lessees::lessees_ptr"]
        [::std::mem::offset_of!(drm_mode_list_lessees, lessees_ptr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_get_lease {
    pub count_objects: __u32,
    pub pad: __u32,
    pub objects_ptr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_get_lease"][::std::mem::size_of::<drm_mode_get_lease>() - 16usize];
    ["Alignment of drm_mode_get_lease"][::std::mem::align_of::<drm_mode_get_lease>() - 8usize];
    ["Offset of field: drm_mode_get_lease::count_objects"]
        [::std::mem::offset_of!(drm_mode_get_lease, count_objects) - 0usize];
    ["Offset of field: drm_mode_get_lease::pad"]
        [::std::mem::offset_of!(drm_mode_get_lease, pad) - 4usize];
    ["Offset of field: drm_mode_get_lease::objects_ptr"]
        [::std::mem::offset_of!(drm_mode_get_lease, objects_ptr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_revoke_lease {
    pub lessee_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_revoke_lease"][::std::mem::size_of::<drm_mode_revoke_lease>() - 4usize];
    ["Alignment of drm_mode_revoke_lease"]
        [::std::mem::align_of::<drm_mode_revoke_lease>() - 4usize];
    ["Offset of field: drm_mode_revoke_lease::lessee_id"]
        [::std::mem::offset_of!(drm_mode_revoke_lease, lessee_id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_mode_rect {
    pub x1: __s32,
    pub y1: __s32,
    pub x2: __s32,
    pub y2: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_mode_rect"][::std::mem::size_of::<drm_mode_rect>() - 16usize];
    ["Alignment of drm_mode_rect"][::std::mem::align_of::<drm_mode_rect>() - 4usize];
    ["Offset of field: drm_mode_rect::x1"][::std::mem::offset_of!(drm_mode_rect, x1) - 0usize];
    ["Offset of field: drm_mode_rect::y1"][::std::mem::offset_of!(drm_mode_rect, y1) - 4usize];
    ["Offset of field: drm_mode_rect::x2"][::std::mem::offset_of!(drm_mode_rect, x2) - 8usize];
    ["Offset of field: drm_mode_rect::y2"][::std::mem::offset_of!(drm_mode_rect, y2) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event {
    pub type_: __u32,
    pub length: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_event"][::std::mem::size_of::<drm_event>() - 8usize];
    ["Alignment of drm_event"][::std::mem::align_of::<drm_event>() - 4usize];
    ["Offset of field: drm_event::type_"][::std::mem::offset_of!(drm_event, type_) - 0usize];
    ["Offset of field: drm_event::length"][::std::mem::offset_of!(drm_event, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event_vblank {
    pub base: drm_event,
    pub user_data: __u64,
    pub tv_sec: __u32,
    pub tv_usec: __u32,
    pub sequence: __u32,
    pub crtc_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_event_vblank"][::std::mem::size_of::<drm_event_vblank>() - 32usize];
    ["Alignment of drm_event_vblank"][::std::mem::align_of::<drm_event_vblank>() - 8usize];
    ["Offset of field: drm_event_vblank::base"]
        [::std::mem::offset_of!(drm_event_vblank, base) - 0usize];
    ["Offset of field: drm_event_vblank::user_data"]
        [::std::mem::offset_of!(drm_event_vblank, user_data) - 8usize];
    ["Offset of field: drm_event_vblank::tv_sec"]
        [::std::mem::offset_of!(drm_event_vblank, tv_sec) - 16usize];
    ["Offset of field: drm_event_vblank::tv_usec"]
        [::std::mem::offset_of!(drm_event_vblank, tv_usec) - 20usize];
    ["Offset of field: drm_event_vblank::sequence"]
        [::std::mem::offset_of!(drm_event_vblank, sequence) - 24usize];
    ["Offset of field: drm_event_vblank::crtc_id"]
        [::std::mem::offset_of!(drm_event_vblank, crtc_id) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_event_crtc_sequence {
    pub base: drm_event,
    pub user_data: __u64,
    pub time_ns: __s64,
    pub sequence: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_event_crtc_sequence"][::std::mem::size_of::<drm_event_crtc_sequence>() - 32usize];
    ["Alignment of drm_event_crtc_sequence"]
        [::std::mem::align_of::<drm_event_crtc_sequence>() - 8usize];
    ["Offset of field: drm_event_crtc_sequence::base"]
        [::std::mem::offset_of!(drm_event_crtc_sequence, base) - 0usize];
    ["Offset of field: drm_event_crtc_sequence::user_data"]
        [::std::mem::offset_of!(drm_event_crtc_sequence, user_data) - 8usize];
    ["Offset of field: drm_event_crtc_sequence::time_ns"]
        [::std::mem::offset_of!(drm_event_crtc_sequence, time_ns) - 16usize];
    ["Offset of field: drm_event_crtc_sequence::sequence"]
        [::std::mem::offset_of!(drm_event_crtc_sequence, sequence) - 24usize];
};
pub type drm_clip_rect_t = drm_clip_rect;
pub type drm_drawable_info_t = drm_drawable_info;
pub type drm_tex_region_t = drm_tex_region;
pub type drm_hw_lock_t = drm_hw_lock;
pub type drm_version_t = drm_version;
pub type drm_unique_t = drm_unique;
pub type drm_list_t = drm_list;
pub type drm_block_t = drm_block;
pub type drm_control_t = drm_control;
pub use self::drm_map_flags as drm_map_flags_t;
pub use self::drm_map_type as drm_map_type_t;
pub type drm_ctx_priv_map_t = drm_ctx_priv_map;
pub type drm_map_t = drm_map;
pub type drm_client_t = drm_client;
pub use self::drm_stat_type as drm_stat_type_t;
pub type drm_stats_t = drm_stats;
pub use self::drm_lock_flags as drm_lock_flags_t;
pub type drm_lock_t = drm_lock;
pub use self::drm_dma_flags as drm_dma_flags_t;
pub type drm_buf_desc_t = drm_buf_desc;
pub type drm_buf_info_t = drm_buf_info;
pub type drm_buf_free_t = drm_buf_free;
pub type drm_buf_pub_t = drm_buf_pub;
pub type drm_buf_map_t = drm_buf_map;
pub type drm_dma_t = drm_dma;
pub type drm_wait_vblank_t = drm_wait_vblank;
pub type drm_agp_mode_t = drm_agp_mode;
pub use self::drm_ctx_flags as drm_ctx_flags_t;
pub type drm_ctx_t = drm_ctx;
pub type drm_ctx_res_t = drm_ctx_res;
pub type drm_draw_t = drm_draw;
pub type drm_update_draw_t = drm_update_draw;
pub type drm_auth_t = drm_auth;
pub type drm_irq_busid_t = drm_irq_busid;
pub use self::drm_vblank_seq_type as drm_vblank_seq_type_t;
pub type drm_agp_buffer_t = drm_agp_buffer;
pub type drm_agp_binding_t = drm_agp_binding;
pub type drm_agp_info_t = drm_agp_info;
pub type drm_scatter_gather_t = drm_scatter_gather;
pub type drm_set_version_t = drm_set_version;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_create_in {
    pub bo_size: __u64,
    pub alignment: __u64,
    pub domains: __u64,
    pub domain_flags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_create_in"]
        [::std::mem::size_of::<drm_amdgpu_gem_create_in>() - 32usize];
    ["Alignment of drm_amdgpu_gem_create_in"]
        [::std::mem::align_of::<drm_amdgpu_gem_create_in>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_create_in::bo_size"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create_in, bo_size) - 0usize];
    ["Offset of field: drm_amdgpu_gem_create_in::alignment"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create_in, alignment) - 8usize];
    ["Offset of field: drm_amdgpu_gem_create_in::domains"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create_in, domains) - 16usize];
    ["Offset of field: drm_amdgpu_gem_create_in::domain_flags"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create_in, domain_flags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_create_out {
    pub handle: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_create_out"]
        [::std::mem::size_of::<drm_amdgpu_gem_create_out>() - 8usize];
    ["Alignment of drm_amdgpu_gem_create_out"]
        [::std::mem::align_of::<drm_amdgpu_gem_create_out>() - 4usize];
    ["Offset of field: drm_amdgpu_gem_create_out::handle"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create_out, handle) - 0usize];
    ["Offset of field: drm_amdgpu_gem_create_out::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create_out, _pad) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_gem_create {
    pub in_: drm_amdgpu_gem_create_in,
    pub out: drm_amdgpu_gem_create_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_create"][::std::mem::size_of::<drm_amdgpu_gem_create>() - 32usize];
    ["Alignment of drm_amdgpu_gem_create"]
        [::std::mem::align_of::<drm_amdgpu_gem_create>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_create::in_"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create, in_) - 0usize];
    ["Offset of field: drm_amdgpu_gem_create::out"]
        [::std::mem::offset_of!(drm_amdgpu_gem_create, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_bo_list_in {
    pub operation: __u32,
    pub list_handle: __u32,
    pub bo_number: __u32,
    pub bo_info_size: __u32,
    pub bo_info_ptr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_bo_list_in"][::std::mem::size_of::<drm_amdgpu_bo_list_in>() - 24usize];
    ["Alignment of drm_amdgpu_bo_list_in"]
        [::std::mem::align_of::<drm_amdgpu_bo_list_in>() - 8usize];
    ["Offset of field: drm_amdgpu_bo_list_in::operation"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_in, operation) - 0usize];
    ["Offset of field: drm_amdgpu_bo_list_in::list_handle"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_in, list_handle) - 4usize];
    ["Offset of field: drm_amdgpu_bo_list_in::bo_number"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_in, bo_number) - 8usize];
    ["Offset of field: drm_amdgpu_bo_list_in::bo_info_size"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_in, bo_info_size) - 12usize];
    ["Offset of field: drm_amdgpu_bo_list_in::bo_info_ptr"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_in, bo_info_ptr) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_bo_list_entry {
    pub bo_handle: __u32,
    pub bo_priority: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_bo_list_entry"]
        [::std::mem::size_of::<drm_amdgpu_bo_list_entry>() - 8usize];
    ["Alignment of drm_amdgpu_bo_list_entry"]
        [::std::mem::align_of::<drm_amdgpu_bo_list_entry>() - 4usize];
    ["Offset of field: drm_amdgpu_bo_list_entry::bo_handle"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_entry, bo_handle) - 0usize];
    ["Offset of field: drm_amdgpu_bo_list_entry::bo_priority"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_entry, bo_priority) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_bo_list_out {
    pub list_handle: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_bo_list_out"][::std::mem::size_of::<drm_amdgpu_bo_list_out>() - 8usize];
    ["Alignment of drm_amdgpu_bo_list_out"]
        [::std::mem::align_of::<drm_amdgpu_bo_list_out>() - 4usize];
    ["Offset of field: drm_amdgpu_bo_list_out::list_handle"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_out, list_handle) - 0usize];
    ["Offset of field: drm_amdgpu_bo_list_out::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list_out, _pad) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_bo_list {
    pub in_: drm_amdgpu_bo_list_in,
    pub out: drm_amdgpu_bo_list_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_bo_list"][::std::mem::size_of::<drm_amdgpu_bo_list>() - 24usize];
    ["Alignment of drm_amdgpu_bo_list"][::std::mem::align_of::<drm_amdgpu_bo_list>() - 8usize];
    ["Offset of field: drm_amdgpu_bo_list::in_"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list, in_) - 0usize];
    ["Offset of field: drm_amdgpu_bo_list::out"]
        [::std::mem::offset_of!(drm_amdgpu_bo_list, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_in {
    pub op: __u32,
    pub flags: __u32,
    pub ctx_id: __u32,
    pub priority: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_ctx_in"][::std::mem::size_of::<drm_amdgpu_ctx_in>() - 16usize];
    ["Alignment of drm_amdgpu_ctx_in"][::std::mem::align_of::<drm_amdgpu_ctx_in>() - 4usize];
    ["Offset of field: drm_amdgpu_ctx_in::op"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_in, op) - 0usize];
    ["Offset of field: drm_amdgpu_ctx_in::flags"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_in, flags) - 4usize];
    ["Offset of field: drm_amdgpu_ctx_in::ctx_id"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_in, ctx_id) - 8usize];
    ["Offset of field: drm_amdgpu_ctx_in::priority"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_in, priority) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_ctx_out {
    pub alloc: drm_amdgpu_ctx_out__bindgen_ty_1,
    pub state: drm_amdgpu_ctx_out__bindgen_ty_2,
    pub pstate: drm_amdgpu_ctx_out__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_out__bindgen_ty_1 {
    pub ctx_id: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_ctx_out__bindgen_ty_1"]
        [::std::mem::size_of::<drm_amdgpu_ctx_out__bindgen_ty_1>() - 8usize];
    ["Alignment of drm_amdgpu_ctx_out__bindgen_ty_1"]
        [::std::mem::align_of::<drm_amdgpu_ctx_out__bindgen_ty_1>() - 4usize];
    ["Offset of field: drm_amdgpu_ctx_out__bindgen_ty_1::ctx_id"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out__bindgen_ty_1, ctx_id) - 0usize];
    ["Offset of field: drm_amdgpu_ctx_out__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out__bindgen_ty_1, _pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_out__bindgen_ty_2 {
    pub flags: __u64,
    pub hangs: __u32,
    pub reset_status: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_ctx_out__bindgen_ty_2"]
        [::std::mem::size_of::<drm_amdgpu_ctx_out__bindgen_ty_2>() - 16usize];
    ["Alignment of drm_amdgpu_ctx_out__bindgen_ty_2"]
        [::std::mem::align_of::<drm_amdgpu_ctx_out__bindgen_ty_2>() - 8usize];
    ["Offset of field: drm_amdgpu_ctx_out__bindgen_ty_2::flags"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out__bindgen_ty_2, flags) - 0usize];
    ["Offset of field: drm_amdgpu_ctx_out__bindgen_ty_2::hangs"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out__bindgen_ty_2, hangs) - 8usize];
    ["Offset of field: drm_amdgpu_ctx_out__bindgen_ty_2::reset_status"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out__bindgen_ty_2, reset_status) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_ctx_out__bindgen_ty_3 {
    pub flags: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_ctx_out__bindgen_ty_3"]
        [::std::mem::size_of::<drm_amdgpu_ctx_out__bindgen_ty_3>() - 8usize];
    ["Alignment of drm_amdgpu_ctx_out__bindgen_ty_3"]
        [::std::mem::align_of::<drm_amdgpu_ctx_out__bindgen_ty_3>() - 4usize];
    ["Offset of field: drm_amdgpu_ctx_out__bindgen_ty_3::flags"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out__bindgen_ty_3, flags) - 0usize];
    ["Offset of field: drm_amdgpu_ctx_out__bindgen_ty_3::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out__bindgen_ty_3, _pad) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_ctx_out"][::std::mem::size_of::<drm_amdgpu_ctx_out>() - 16usize];
    ["Alignment of drm_amdgpu_ctx_out"][::std::mem::align_of::<drm_amdgpu_ctx_out>() - 8usize];
    ["Offset of field: drm_amdgpu_ctx_out::alloc"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out, alloc) - 0usize];
    ["Offset of field: drm_amdgpu_ctx_out::state"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out, state) - 0usize];
    ["Offset of field: drm_amdgpu_ctx_out::pstate"]
        [::std::mem::offset_of!(drm_amdgpu_ctx_out, pstate) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_ctx {
    pub in_: drm_amdgpu_ctx_in,
    pub out: drm_amdgpu_ctx_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_ctx"][::std::mem::size_of::<drm_amdgpu_ctx>() - 16usize];
    ["Alignment of drm_amdgpu_ctx"][::std::mem::align_of::<drm_amdgpu_ctx>() - 8usize];
    ["Offset of field: drm_amdgpu_ctx::in_"][::std::mem::offset_of!(drm_amdgpu_ctx, in_) - 0usize];
    ["Offset of field: drm_amdgpu_ctx::out"][::std::mem::offset_of!(drm_amdgpu_ctx, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_vm_in {
    pub op: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_vm_in"][::std::mem::size_of::<drm_amdgpu_vm_in>() - 8usize];
    ["Alignment of drm_amdgpu_vm_in"][::std::mem::align_of::<drm_amdgpu_vm_in>() - 4usize];
    ["Offset of field: drm_amdgpu_vm_in::op"]
        [::std::mem::offset_of!(drm_amdgpu_vm_in, op) - 0usize];
    ["Offset of field: drm_amdgpu_vm_in::flags"]
        [::std::mem::offset_of!(drm_amdgpu_vm_in, flags) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_vm_out {
    pub flags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_vm_out"][::std::mem::size_of::<drm_amdgpu_vm_out>() - 8usize];
    ["Alignment of drm_amdgpu_vm_out"][::std::mem::align_of::<drm_amdgpu_vm_out>() - 8usize];
    ["Offset of field: drm_amdgpu_vm_out::flags"]
        [::std::mem::offset_of!(drm_amdgpu_vm_out, flags) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_vm {
    pub in_: drm_amdgpu_vm_in,
    pub out: drm_amdgpu_vm_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_vm"][::std::mem::size_of::<drm_amdgpu_vm>() - 8usize];
    ["Alignment of drm_amdgpu_vm"][::std::mem::align_of::<drm_amdgpu_vm>() - 8usize];
    ["Offset of field: drm_amdgpu_vm::in_"][::std::mem::offset_of!(drm_amdgpu_vm, in_) - 0usize];
    ["Offset of field: drm_amdgpu_vm::out"][::std::mem::offset_of!(drm_amdgpu_vm, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_sched_in {
    pub op: __u32,
    pub fd: __u32,
    pub priority: __s32,
    pub ctx_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_sched_in"][::std::mem::size_of::<drm_amdgpu_sched_in>() - 16usize];
    ["Alignment of drm_amdgpu_sched_in"][::std::mem::align_of::<drm_amdgpu_sched_in>() - 4usize];
    ["Offset of field: drm_amdgpu_sched_in::op"]
        [::std::mem::offset_of!(drm_amdgpu_sched_in, op) - 0usize];
    ["Offset of field: drm_amdgpu_sched_in::fd"]
        [::std::mem::offset_of!(drm_amdgpu_sched_in, fd) - 4usize];
    ["Offset of field: drm_amdgpu_sched_in::priority"]
        [::std::mem::offset_of!(drm_amdgpu_sched_in, priority) - 8usize];
    ["Offset of field: drm_amdgpu_sched_in::ctx_id"]
        [::std::mem::offset_of!(drm_amdgpu_sched_in, ctx_id) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_sched {
    pub in_: drm_amdgpu_sched_in,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_sched"][::std::mem::size_of::<drm_amdgpu_sched>() - 16usize];
    ["Alignment of drm_amdgpu_sched"][::std::mem::align_of::<drm_amdgpu_sched>() - 4usize];
    ["Offset of field: drm_amdgpu_sched::in_"]
        [::std::mem::offset_of!(drm_amdgpu_sched, in_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_userptr {
    pub addr: __u64,
    pub size: __u64,
    pub flags: __u32,
    pub handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_userptr"][::std::mem::size_of::<drm_amdgpu_gem_userptr>() - 24usize];
    ["Alignment of drm_amdgpu_gem_userptr"]
        [::std::mem::align_of::<drm_amdgpu_gem_userptr>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_userptr::addr"]
        [::std::mem::offset_of!(drm_amdgpu_gem_userptr, addr) - 0usize];
    ["Offset of field: drm_amdgpu_gem_userptr::size"]
        [::std::mem::offset_of!(drm_amdgpu_gem_userptr, size) - 8usize];
    ["Offset of field: drm_amdgpu_gem_userptr::flags"]
        [::std::mem::offset_of!(drm_amdgpu_gem_userptr, flags) - 16usize];
    ["Offset of field: drm_amdgpu_gem_userptr::handle"]
        [::std::mem::offset_of!(drm_amdgpu_gem_userptr, handle) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_metadata {
    pub handle: __u32,
    pub op: __u32,
    pub data: drm_amdgpu_gem_metadata__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_metadata__bindgen_ty_1 {
    pub flags: __u64,
    pub tiling_info: __u64,
    pub data_size_bytes: __u32,
    pub data: [__u32; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_metadata__bindgen_ty_1"]
        [::std::mem::size_of::<drm_amdgpu_gem_metadata__bindgen_ty_1>() - 280usize];
    ["Alignment of drm_amdgpu_gem_metadata__bindgen_ty_1"]
        [::std::mem::align_of::<drm_amdgpu_gem_metadata__bindgen_ty_1>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_metadata__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(drm_amdgpu_gem_metadata__bindgen_ty_1, flags) - 0usize];
    ["Offset of field: drm_amdgpu_gem_metadata__bindgen_ty_1::tiling_info"]
        [::std::mem::offset_of!(drm_amdgpu_gem_metadata__bindgen_ty_1, tiling_info) - 8usize];
    ["Offset of field: drm_amdgpu_gem_metadata__bindgen_ty_1::data_size_bytes"]
        [::std::mem::offset_of!(drm_amdgpu_gem_metadata__bindgen_ty_1, data_size_bytes) - 16usize];
    ["Offset of field: drm_amdgpu_gem_metadata__bindgen_ty_1::data"]
        [::std::mem::offset_of!(drm_amdgpu_gem_metadata__bindgen_ty_1, data) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_metadata"]
        [::std::mem::size_of::<drm_amdgpu_gem_metadata>() - 288usize];
    ["Alignment of drm_amdgpu_gem_metadata"]
        [::std::mem::align_of::<drm_amdgpu_gem_metadata>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_metadata::handle"]
        [::std::mem::offset_of!(drm_amdgpu_gem_metadata, handle) - 0usize];
    ["Offset of field: drm_amdgpu_gem_metadata::op"]
        [::std::mem::offset_of!(drm_amdgpu_gem_metadata, op) - 4usize];
    ["Offset of field: drm_amdgpu_gem_metadata::data"]
        [::std::mem::offset_of!(drm_amdgpu_gem_metadata, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_mmap_in {
    pub handle: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_mmap_in"][::std::mem::size_of::<drm_amdgpu_gem_mmap_in>() - 8usize];
    ["Alignment of drm_amdgpu_gem_mmap_in"]
        [::std::mem::align_of::<drm_amdgpu_gem_mmap_in>() - 4usize];
    ["Offset of field: drm_amdgpu_gem_mmap_in::handle"]
        [::std::mem::offset_of!(drm_amdgpu_gem_mmap_in, handle) - 0usize];
    ["Offset of field: drm_amdgpu_gem_mmap_in::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_gem_mmap_in, _pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_mmap_out {
    pub addr_ptr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_mmap_out"][::std::mem::size_of::<drm_amdgpu_gem_mmap_out>() - 8usize];
    ["Alignment of drm_amdgpu_gem_mmap_out"]
        [::std::mem::align_of::<drm_amdgpu_gem_mmap_out>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_mmap_out::addr_ptr"]
        [::std::mem::offset_of!(drm_amdgpu_gem_mmap_out, addr_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_gem_mmap {
    pub in_: drm_amdgpu_gem_mmap_in,
    pub out: drm_amdgpu_gem_mmap_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_mmap"][::std::mem::size_of::<drm_amdgpu_gem_mmap>() - 8usize];
    ["Alignment of drm_amdgpu_gem_mmap"][::std::mem::align_of::<drm_amdgpu_gem_mmap>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_mmap::in_"]
        [::std::mem::offset_of!(drm_amdgpu_gem_mmap, in_) - 0usize];
    ["Offset of field: drm_amdgpu_gem_mmap::out"]
        [::std::mem::offset_of!(drm_amdgpu_gem_mmap, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_wait_idle_in {
    pub handle: __u32,
    pub flags: __u32,
    pub timeout: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_wait_idle_in"]
        [::std::mem::size_of::<drm_amdgpu_gem_wait_idle_in>() - 16usize];
    ["Alignment of drm_amdgpu_gem_wait_idle_in"]
        [::std::mem::align_of::<drm_amdgpu_gem_wait_idle_in>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_wait_idle_in::handle"]
        [::std::mem::offset_of!(drm_amdgpu_gem_wait_idle_in, handle) - 0usize];
    ["Offset of field: drm_amdgpu_gem_wait_idle_in::flags"]
        [::std::mem::offset_of!(drm_amdgpu_gem_wait_idle_in, flags) - 4usize];
    ["Offset of field: drm_amdgpu_gem_wait_idle_in::timeout"]
        [::std::mem::offset_of!(drm_amdgpu_gem_wait_idle_in, timeout) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_wait_idle_out {
    pub status: __u32,
    pub domain: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_wait_idle_out"]
        [::std::mem::size_of::<drm_amdgpu_gem_wait_idle_out>() - 8usize];
    ["Alignment of drm_amdgpu_gem_wait_idle_out"]
        [::std::mem::align_of::<drm_amdgpu_gem_wait_idle_out>() - 4usize];
    ["Offset of field: drm_amdgpu_gem_wait_idle_out::status"]
        [::std::mem::offset_of!(drm_amdgpu_gem_wait_idle_out, status) - 0usize];
    ["Offset of field: drm_amdgpu_gem_wait_idle_out::domain"]
        [::std::mem::offset_of!(drm_amdgpu_gem_wait_idle_out, domain) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_gem_wait_idle {
    pub in_: drm_amdgpu_gem_wait_idle_in,
    pub out: drm_amdgpu_gem_wait_idle_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_wait_idle"]
        [::std::mem::size_of::<drm_amdgpu_gem_wait_idle>() - 16usize];
    ["Alignment of drm_amdgpu_gem_wait_idle"]
        [::std::mem::align_of::<drm_amdgpu_gem_wait_idle>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_wait_idle::in_"]
        [::std::mem::offset_of!(drm_amdgpu_gem_wait_idle, in_) - 0usize];
    ["Offset of field: drm_amdgpu_gem_wait_idle::out"]
        [::std::mem::offset_of!(drm_amdgpu_gem_wait_idle, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_cs_in {
    pub handle: __u64,
    pub timeout: __u64,
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
    pub ctx_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_wait_cs_in"][::std::mem::size_of::<drm_amdgpu_wait_cs_in>() - 32usize];
    ["Alignment of drm_amdgpu_wait_cs_in"]
        [::std::mem::align_of::<drm_amdgpu_wait_cs_in>() - 8usize];
    ["Offset of field: drm_amdgpu_wait_cs_in::handle"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs_in, handle) - 0usize];
    ["Offset of field: drm_amdgpu_wait_cs_in::timeout"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs_in, timeout) - 8usize];
    ["Offset of field: drm_amdgpu_wait_cs_in::ip_type"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs_in, ip_type) - 16usize];
    ["Offset of field: drm_amdgpu_wait_cs_in::ip_instance"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs_in, ip_instance) - 20usize];
    ["Offset of field: drm_amdgpu_wait_cs_in::ring"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs_in, ring) - 24usize];
    ["Offset of field: drm_amdgpu_wait_cs_in::ctx_id"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs_in, ctx_id) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_cs_out {
    pub status: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_wait_cs_out"][::std::mem::size_of::<drm_amdgpu_wait_cs_out>() - 8usize];
    ["Alignment of drm_amdgpu_wait_cs_out"]
        [::std::mem::align_of::<drm_amdgpu_wait_cs_out>() - 8usize];
    ["Offset of field: drm_amdgpu_wait_cs_out::status"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs_out, status) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_wait_cs {
    pub in_: drm_amdgpu_wait_cs_in,
    pub out: drm_amdgpu_wait_cs_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_wait_cs"][::std::mem::size_of::<drm_amdgpu_wait_cs>() - 32usize];
    ["Alignment of drm_amdgpu_wait_cs"][::std::mem::align_of::<drm_amdgpu_wait_cs>() - 8usize];
    ["Offset of field: drm_amdgpu_wait_cs::in_"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs, in_) - 0usize];
    ["Offset of field: drm_amdgpu_wait_cs::out"]
        [::std::mem::offset_of!(drm_amdgpu_wait_cs, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_fence {
    pub ctx_id: __u32,
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
    pub seq_no: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_fence"][::std::mem::size_of::<drm_amdgpu_fence>() - 24usize];
    ["Alignment of drm_amdgpu_fence"][::std::mem::align_of::<drm_amdgpu_fence>() - 8usize];
    ["Offset of field: drm_amdgpu_fence::ctx_id"]
        [::std::mem::offset_of!(drm_amdgpu_fence, ctx_id) - 0usize];
    ["Offset of field: drm_amdgpu_fence::ip_type"]
        [::std::mem::offset_of!(drm_amdgpu_fence, ip_type) - 4usize];
    ["Offset of field: drm_amdgpu_fence::ip_instance"]
        [::std::mem::offset_of!(drm_amdgpu_fence, ip_instance) - 8usize];
    ["Offset of field: drm_amdgpu_fence::ring"]
        [::std::mem::offset_of!(drm_amdgpu_fence, ring) - 12usize];
    ["Offset of field: drm_amdgpu_fence::seq_no"]
        [::std::mem::offset_of!(drm_amdgpu_fence, seq_no) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_fences_in {
    pub fences: __u64,
    pub fence_count: __u32,
    pub wait_all: __u32,
    pub timeout_ns: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_wait_fences_in"]
        [::std::mem::size_of::<drm_amdgpu_wait_fences_in>() - 24usize];
    ["Alignment of drm_amdgpu_wait_fences_in"]
        [::std::mem::align_of::<drm_amdgpu_wait_fences_in>() - 8usize];
    ["Offset of field: drm_amdgpu_wait_fences_in::fences"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences_in, fences) - 0usize];
    ["Offset of field: drm_amdgpu_wait_fences_in::fence_count"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences_in, fence_count) - 8usize];
    ["Offset of field: drm_amdgpu_wait_fences_in::wait_all"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences_in, wait_all) - 12usize];
    ["Offset of field: drm_amdgpu_wait_fences_in::timeout_ns"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences_in, timeout_ns) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_wait_fences_out {
    pub status: __u32,
    pub first_signaled: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_wait_fences_out"]
        [::std::mem::size_of::<drm_amdgpu_wait_fences_out>() - 8usize];
    ["Alignment of drm_amdgpu_wait_fences_out"]
        [::std::mem::align_of::<drm_amdgpu_wait_fences_out>() - 4usize];
    ["Offset of field: drm_amdgpu_wait_fences_out::status"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences_out, status) - 0usize];
    ["Offset of field: drm_amdgpu_wait_fences_out::first_signaled"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences_out, first_signaled) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_wait_fences {
    pub in_: drm_amdgpu_wait_fences_in,
    pub out: drm_amdgpu_wait_fences_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_wait_fences"][::std::mem::size_of::<drm_amdgpu_wait_fences>() - 24usize];
    ["Alignment of drm_amdgpu_wait_fences"]
        [::std::mem::align_of::<drm_amdgpu_wait_fences>() - 8usize];
    ["Offset of field: drm_amdgpu_wait_fences::in_"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences, in_) - 0usize];
    ["Offset of field: drm_amdgpu_wait_fences::out"]
        [::std::mem::offset_of!(drm_amdgpu_wait_fences, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_op {
    pub handle: __u32,
    pub op: __u32,
    pub value: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_op"][::std::mem::size_of::<drm_amdgpu_gem_op>() - 16usize];
    ["Alignment of drm_amdgpu_gem_op"][::std::mem::align_of::<drm_amdgpu_gem_op>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_op::handle"]
        [::std::mem::offset_of!(drm_amdgpu_gem_op, handle) - 0usize];
    ["Offset of field: drm_amdgpu_gem_op::op"]
        [::std::mem::offset_of!(drm_amdgpu_gem_op, op) - 4usize];
    ["Offset of field: drm_amdgpu_gem_op::value"]
        [::std::mem::offset_of!(drm_amdgpu_gem_op, value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_gem_va {
    pub handle: __u32,
    pub _pad: __u32,
    pub operation: __u32,
    pub flags: __u32,
    pub va_address: __u64,
    pub offset_in_bo: __u64,
    pub map_size: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_gem_va"][::std::mem::size_of::<drm_amdgpu_gem_va>() - 40usize];
    ["Alignment of drm_amdgpu_gem_va"][::std::mem::align_of::<drm_amdgpu_gem_va>() - 8usize];
    ["Offset of field: drm_amdgpu_gem_va::handle"]
        [::std::mem::offset_of!(drm_amdgpu_gem_va, handle) - 0usize];
    ["Offset of field: drm_amdgpu_gem_va::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_gem_va, _pad) - 4usize];
    ["Offset of field: drm_amdgpu_gem_va::operation"]
        [::std::mem::offset_of!(drm_amdgpu_gem_va, operation) - 8usize];
    ["Offset of field: drm_amdgpu_gem_va::flags"]
        [::std::mem::offset_of!(drm_amdgpu_gem_va, flags) - 12usize];
    ["Offset of field: drm_amdgpu_gem_va::va_address"]
        [::std::mem::offset_of!(drm_amdgpu_gem_va, va_address) - 16usize];
    ["Offset of field: drm_amdgpu_gem_va::offset_in_bo"]
        [::std::mem::offset_of!(drm_amdgpu_gem_va, offset_in_bo) - 24usize];
    ["Offset of field: drm_amdgpu_gem_va::map_size"]
        [::std::mem::offset_of!(drm_amdgpu_gem_va, map_size) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk {
    pub chunk_id: __u32,
    pub length_dw: __u32,
    pub chunk_data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk"][::std::mem::size_of::<drm_amdgpu_cs_chunk>() - 16usize];
    ["Alignment of drm_amdgpu_cs_chunk"][::std::mem::align_of::<drm_amdgpu_cs_chunk>() - 8usize];
    ["Offset of field: drm_amdgpu_cs_chunk::chunk_id"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk, chunk_id) - 0usize];
    ["Offset of field: drm_amdgpu_cs_chunk::length_dw"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk, length_dw) - 4usize];
    ["Offset of field: drm_amdgpu_cs_chunk::chunk_data"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk, chunk_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_in {
    pub ctx_id: __u32,
    pub bo_list_handle: __u32,
    pub num_chunks: __u32,
    pub flags: __u32,
    pub chunks: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_in"][::std::mem::size_of::<drm_amdgpu_cs_in>() - 24usize];
    ["Alignment of drm_amdgpu_cs_in"][::std::mem::align_of::<drm_amdgpu_cs_in>() - 8usize];
    ["Offset of field: drm_amdgpu_cs_in::ctx_id"]
        [::std::mem::offset_of!(drm_amdgpu_cs_in, ctx_id) - 0usize];
    ["Offset of field: drm_amdgpu_cs_in::bo_list_handle"]
        [::std::mem::offset_of!(drm_amdgpu_cs_in, bo_list_handle) - 4usize];
    ["Offset of field: drm_amdgpu_cs_in::num_chunks"]
        [::std::mem::offset_of!(drm_amdgpu_cs_in, num_chunks) - 8usize];
    ["Offset of field: drm_amdgpu_cs_in::flags"]
        [::std::mem::offset_of!(drm_amdgpu_cs_in, flags) - 12usize];
    ["Offset of field: drm_amdgpu_cs_in::chunks"]
        [::std::mem::offset_of!(drm_amdgpu_cs_in, chunks) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_out {
    pub handle: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_out"][::std::mem::size_of::<drm_amdgpu_cs_out>() - 8usize];
    ["Alignment of drm_amdgpu_cs_out"][::std::mem::align_of::<drm_amdgpu_cs_out>() - 8usize];
    ["Offset of field: drm_amdgpu_cs_out::handle"]
        [::std::mem::offset_of!(drm_amdgpu_cs_out, handle) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_cs {
    pub in_: drm_amdgpu_cs_in,
    pub out: drm_amdgpu_cs_out,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs"][::std::mem::size_of::<drm_amdgpu_cs>() - 24usize];
    ["Alignment of drm_amdgpu_cs"][::std::mem::align_of::<drm_amdgpu_cs>() - 8usize];
    ["Offset of field: drm_amdgpu_cs::in_"][::std::mem::offset_of!(drm_amdgpu_cs, in_) - 0usize];
    ["Offset of field: drm_amdgpu_cs::out"][::std::mem::offset_of!(drm_amdgpu_cs, out) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_ib {
    pub _pad: __u32,
    pub flags: __u32,
    pub va_start: __u64,
    pub ib_bytes: __u32,
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk_ib"][::std::mem::size_of::<drm_amdgpu_cs_chunk_ib>() - 32usize];
    ["Alignment of drm_amdgpu_cs_chunk_ib"]
        [::std::mem::align_of::<drm_amdgpu_cs_chunk_ib>() - 8usize];
    ["Offset of field: drm_amdgpu_cs_chunk_ib::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_ib, _pad) - 0usize];
    ["Offset of field: drm_amdgpu_cs_chunk_ib::flags"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_ib, flags) - 4usize];
    ["Offset of field: drm_amdgpu_cs_chunk_ib::va_start"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_ib, va_start) - 8usize];
    ["Offset of field: drm_amdgpu_cs_chunk_ib::ib_bytes"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_ib, ib_bytes) - 16usize];
    ["Offset of field: drm_amdgpu_cs_chunk_ib::ip_type"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_ib, ip_type) - 20usize];
    ["Offset of field: drm_amdgpu_cs_chunk_ib::ip_instance"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_ib, ip_instance) - 24usize];
    ["Offset of field: drm_amdgpu_cs_chunk_ib::ring"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_ib, ring) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_dep {
    pub ip_type: __u32,
    pub ip_instance: __u32,
    pub ring: __u32,
    pub ctx_id: __u32,
    pub handle: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk_dep"][::std::mem::size_of::<drm_amdgpu_cs_chunk_dep>() - 24usize];
    ["Alignment of drm_amdgpu_cs_chunk_dep"]
        [::std::mem::align_of::<drm_amdgpu_cs_chunk_dep>() - 8usize];
    ["Offset of field: drm_amdgpu_cs_chunk_dep::ip_type"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_dep, ip_type) - 0usize];
    ["Offset of field: drm_amdgpu_cs_chunk_dep::ip_instance"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_dep, ip_instance) - 4usize];
    ["Offset of field: drm_amdgpu_cs_chunk_dep::ring"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_dep, ring) - 8usize];
    ["Offset of field: drm_amdgpu_cs_chunk_dep::ctx_id"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_dep, ctx_id) - 12usize];
    ["Offset of field: drm_amdgpu_cs_chunk_dep::handle"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_dep, handle) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_fence {
    pub handle: __u32,
    pub offset: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk_fence"]
        [::std::mem::size_of::<drm_amdgpu_cs_chunk_fence>() - 8usize];
    ["Alignment of drm_amdgpu_cs_chunk_fence"]
        [::std::mem::align_of::<drm_amdgpu_cs_chunk_fence>() - 4usize];
    ["Offset of field: drm_amdgpu_cs_chunk_fence::handle"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_fence, handle) - 0usize];
    ["Offset of field: drm_amdgpu_cs_chunk_fence::offset"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_fence, offset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_sem {
    pub handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk_sem"][::std::mem::size_of::<drm_amdgpu_cs_chunk_sem>() - 4usize];
    ["Alignment of drm_amdgpu_cs_chunk_sem"]
        [::std::mem::align_of::<drm_amdgpu_cs_chunk_sem>() - 4usize];
    ["Offset of field: drm_amdgpu_cs_chunk_sem::handle"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_sem, handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_syncobj {
    pub handle: __u32,
    pub flags: __u32,
    pub point: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk_syncobj"]
        [::std::mem::size_of::<drm_amdgpu_cs_chunk_syncobj>() - 16usize];
    ["Alignment of drm_amdgpu_cs_chunk_syncobj"]
        [::std::mem::align_of::<drm_amdgpu_cs_chunk_syncobj>() - 8usize];
    ["Offset of field: drm_amdgpu_cs_chunk_syncobj::handle"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_syncobj, handle) - 0usize];
    ["Offset of field: drm_amdgpu_cs_chunk_syncobj::flags"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_syncobj, flags) - 4usize];
    ["Offset of field: drm_amdgpu_cs_chunk_syncobj::point"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_syncobj, point) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_fence_to_handle {
    pub in_: drm_amdgpu_fence_to_handle__bindgen_ty_1,
    pub out: drm_amdgpu_fence_to_handle__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_fence_to_handle__bindgen_ty_1 {
    pub fence: drm_amdgpu_fence,
    pub what: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_fence_to_handle__bindgen_ty_1"]
        [::std::mem::size_of::<drm_amdgpu_fence_to_handle__bindgen_ty_1>() - 32usize];
    ["Alignment of drm_amdgpu_fence_to_handle__bindgen_ty_1"]
        [::std::mem::align_of::<drm_amdgpu_fence_to_handle__bindgen_ty_1>() - 8usize];
    ["Offset of field: drm_amdgpu_fence_to_handle__bindgen_ty_1::fence"]
        [::std::mem::offset_of!(drm_amdgpu_fence_to_handle__bindgen_ty_1, fence) - 0usize];
    ["Offset of field: drm_amdgpu_fence_to_handle__bindgen_ty_1::what"]
        [::std::mem::offset_of!(drm_amdgpu_fence_to_handle__bindgen_ty_1, what) - 24usize];
    ["Offset of field: drm_amdgpu_fence_to_handle__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(drm_amdgpu_fence_to_handle__bindgen_ty_1, pad) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_fence_to_handle__bindgen_ty_2 {
    pub handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_fence_to_handle__bindgen_ty_2"]
        [::std::mem::size_of::<drm_amdgpu_fence_to_handle__bindgen_ty_2>() - 4usize];
    ["Alignment of drm_amdgpu_fence_to_handle__bindgen_ty_2"]
        [::std::mem::align_of::<drm_amdgpu_fence_to_handle__bindgen_ty_2>() - 4usize];
    ["Offset of field: drm_amdgpu_fence_to_handle__bindgen_ty_2::handle"]
        [::std::mem::offset_of!(drm_amdgpu_fence_to_handle__bindgen_ty_2, handle) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_fence_to_handle"]
        [::std::mem::size_of::<drm_amdgpu_fence_to_handle>() - 32usize];
    ["Alignment of drm_amdgpu_fence_to_handle"]
        [::std::mem::align_of::<drm_amdgpu_fence_to_handle>() - 8usize];
    ["Offset of field: drm_amdgpu_fence_to_handle::in_"]
        [::std::mem::offset_of!(drm_amdgpu_fence_to_handle, in_) - 0usize];
    ["Offset of field: drm_amdgpu_fence_to_handle::out"]
        [::std::mem::offset_of!(drm_amdgpu_fence_to_handle, out) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct drm_amdgpu_cs_chunk_data {
    pub __bindgen_anon_1: drm_amdgpu_cs_chunk_data__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_cs_chunk_data__bindgen_ty_1 {
    pub ib_data: drm_amdgpu_cs_chunk_ib,
    pub fence_data: drm_amdgpu_cs_chunk_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk_data__bindgen_ty_1"]
        [::std::mem::size_of::<drm_amdgpu_cs_chunk_data__bindgen_ty_1>() - 32usize];
    ["Alignment of drm_amdgpu_cs_chunk_data__bindgen_ty_1"]
        [::std::mem::align_of::<drm_amdgpu_cs_chunk_data__bindgen_ty_1>() - 8usize];
    ["Offset of field: drm_amdgpu_cs_chunk_data__bindgen_ty_1::ib_data"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_data__bindgen_ty_1, ib_data) - 0usize];
    ["Offset of field: drm_amdgpu_cs_chunk_data__bindgen_ty_1::fence_data"]
        [::std::mem::offset_of!(drm_amdgpu_cs_chunk_data__bindgen_ty_1, fence_data) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_cs_chunk_data"]
        [::std::mem::size_of::<drm_amdgpu_cs_chunk_data>() - 32usize];
    ["Alignment of drm_amdgpu_cs_chunk_data"]
        [::std::mem::align_of::<drm_amdgpu_cs_chunk_data>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_query_fw {
    pub fw_type: __u32,
    pub ip_instance: __u32,
    pub index: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_query_fw"][::std::mem::size_of::<drm_amdgpu_query_fw>() - 16usize];
    ["Alignment of drm_amdgpu_query_fw"][::std::mem::align_of::<drm_amdgpu_query_fw>() - 4usize];
    ["Offset of field: drm_amdgpu_query_fw::fw_type"]
        [::std::mem::offset_of!(drm_amdgpu_query_fw, fw_type) - 0usize];
    ["Offset of field: drm_amdgpu_query_fw::ip_instance"]
        [::std::mem::offset_of!(drm_amdgpu_query_fw, ip_instance) - 4usize];
    ["Offset of field: drm_amdgpu_query_fw::index"]
        [::std::mem::offset_of!(drm_amdgpu_query_fw, index) - 8usize];
    ["Offset of field: drm_amdgpu_query_fw::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_query_fw, _pad) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct drm_amdgpu_info {
    pub return_pointer: __u64,
    pub return_size: __u32,
    pub query: __u32,
    pub __bindgen_anon_1: drm_amdgpu_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_amdgpu_info__bindgen_ty_1 {
    pub mode_crtc: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1,
    pub query_hw_ip: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2,
    pub read_mmr_reg: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3,
    pub query_fw: drm_amdgpu_query_fw,
    pub vbios_info: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4,
    pub sensor_info: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5,
    pub video_cap: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1 {
    pub id: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1::id"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1, id) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_1, _pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2 {
    pub type_: __u32,
    pub ip_instance: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2::type_"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2, type_) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2::ip_instance"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_2, ip_instance) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3 {
    pub dword_offset: __u32,
    pub count: __u32,
    pub instance: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3::dword_offset"][::std::mem::offset_of!(
        drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3,
        dword_offset
    ) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3::count"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3, count) - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3::instance"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3, instance) - 8usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3::flags"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_3, flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4 {
    pub type_: __u32,
    pub offset: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4::type_"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4, type_) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4::offset"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_4, offset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5 {
    pub type_: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Alignment of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5::type_"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_5, type_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6 {
    pub type_: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6>() - 4usize];
    ["Alignment of drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6>() - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6::type_"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1__bindgen_ty_6, type_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info__bindgen_ty_1"]
        [::std::mem::size_of::<drm_amdgpu_info__bindgen_ty_1>() - 16usize];
    ["Alignment of drm_amdgpu_info__bindgen_ty_1"]
        [::std::mem::align_of::<drm_amdgpu_info__bindgen_ty_1>() - 4usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1::mode_crtc"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1, mode_crtc) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1::query_hw_ip"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1, query_hw_ip) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1::read_mmr_reg"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1, read_mmr_reg) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1::query_fw"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1, query_fw) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1::vbios_info"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1, vbios_info) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1::sensor_info"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1, sensor_info) - 0usize];
    ["Offset of field: drm_amdgpu_info__bindgen_ty_1::video_cap"]
        [::std::mem::offset_of!(drm_amdgpu_info__bindgen_ty_1, video_cap) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info"][::std::mem::size_of::<drm_amdgpu_info>() - 32usize];
    ["Alignment of drm_amdgpu_info"][::std::mem::align_of::<drm_amdgpu_info>() - 8usize];
    ["Offset of field: drm_amdgpu_info::return_pointer"]
        [::std::mem::offset_of!(drm_amdgpu_info, return_pointer) - 0usize];
    ["Offset of field: drm_amdgpu_info::return_size"]
        [::std::mem::offset_of!(drm_amdgpu_info, return_size) - 8usize];
    ["Offset of field: drm_amdgpu_info::query"]
        [::std::mem::offset_of!(drm_amdgpu_info, query) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_gds {
    pub gds_gfx_partition_size: __u32,
    pub compute_partition_size: __u32,
    pub gds_total_size: __u32,
    pub gws_per_gfx_partition: __u32,
    pub gws_per_compute_partition: __u32,
    pub oa_per_gfx_partition: __u32,
    pub oa_per_compute_partition: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_gds"][::std::mem::size_of::<drm_amdgpu_info_gds>() - 32usize];
    ["Alignment of drm_amdgpu_info_gds"][::std::mem::align_of::<drm_amdgpu_info_gds>() - 4usize];
    ["Offset of field: drm_amdgpu_info_gds::gds_gfx_partition_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, gds_gfx_partition_size) - 0usize];
    ["Offset of field: drm_amdgpu_info_gds::compute_partition_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, compute_partition_size) - 4usize];
    ["Offset of field: drm_amdgpu_info_gds::gds_total_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, gds_total_size) - 8usize];
    ["Offset of field: drm_amdgpu_info_gds::gws_per_gfx_partition"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, gws_per_gfx_partition) - 12usize];
    ["Offset of field: drm_amdgpu_info_gds::gws_per_compute_partition"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, gws_per_compute_partition) - 16usize];
    ["Offset of field: drm_amdgpu_info_gds::oa_per_gfx_partition"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, oa_per_gfx_partition) - 20usize];
    ["Offset of field: drm_amdgpu_info_gds::oa_per_compute_partition"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, oa_per_compute_partition) - 24usize];
    ["Offset of field: drm_amdgpu_info_gds::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_info_gds, _pad) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vram_gtt {
    pub vram_size: __u64,
    pub vram_cpu_accessible_size: __u64,
    pub gtt_size: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_vram_gtt"]
        [::std::mem::size_of::<drm_amdgpu_info_vram_gtt>() - 24usize];
    ["Alignment of drm_amdgpu_info_vram_gtt"]
        [::std::mem::align_of::<drm_amdgpu_info_vram_gtt>() - 8usize];
    ["Offset of field: drm_amdgpu_info_vram_gtt::vram_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_vram_gtt, vram_size) - 0usize];
    ["Offset of field: drm_amdgpu_info_vram_gtt::vram_cpu_accessible_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_vram_gtt, vram_cpu_accessible_size) - 8usize];
    ["Offset of field: drm_amdgpu_info_vram_gtt::gtt_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_vram_gtt, gtt_size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_heap_info {
    pub total_heap_size: __u64,
    pub usable_heap_size: __u64,
    pub heap_usage: __u64,
    pub max_allocation: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_heap_info"][::std::mem::size_of::<drm_amdgpu_heap_info>() - 32usize];
    ["Alignment of drm_amdgpu_heap_info"][::std::mem::align_of::<drm_amdgpu_heap_info>() - 8usize];
    ["Offset of field: drm_amdgpu_heap_info::total_heap_size"]
        [::std::mem::offset_of!(drm_amdgpu_heap_info, total_heap_size) - 0usize];
    ["Offset of field: drm_amdgpu_heap_info::usable_heap_size"]
        [::std::mem::offset_of!(drm_amdgpu_heap_info, usable_heap_size) - 8usize];
    ["Offset of field: drm_amdgpu_heap_info::heap_usage"]
        [::std::mem::offset_of!(drm_amdgpu_heap_info, heap_usage) - 16usize];
    ["Offset of field: drm_amdgpu_heap_info::max_allocation"]
        [::std::mem::offset_of!(drm_amdgpu_heap_info, max_allocation) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_memory_info {
    pub vram: drm_amdgpu_heap_info,
    pub cpu_accessible_vram: drm_amdgpu_heap_info,
    pub gtt: drm_amdgpu_heap_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_memory_info"][::std::mem::size_of::<drm_amdgpu_memory_info>() - 96usize];
    ["Alignment of drm_amdgpu_memory_info"]
        [::std::mem::align_of::<drm_amdgpu_memory_info>() - 8usize];
    ["Offset of field: drm_amdgpu_memory_info::vram"]
        [::std::mem::offset_of!(drm_amdgpu_memory_info, vram) - 0usize];
    ["Offset of field: drm_amdgpu_memory_info::cpu_accessible_vram"]
        [::std::mem::offset_of!(drm_amdgpu_memory_info, cpu_accessible_vram) - 32usize];
    ["Offset of field: drm_amdgpu_memory_info::gtt"]
        [::std::mem::offset_of!(drm_amdgpu_memory_info, gtt) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_firmware {
    pub ver: __u32,
    pub feature: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_firmware"]
        [::std::mem::size_of::<drm_amdgpu_info_firmware>() - 8usize];
    ["Alignment of drm_amdgpu_info_firmware"]
        [::std::mem::align_of::<drm_amdgpu_info_firmware>() - 4usize];
    ["Offset of field: drm_amdgpu_info_firmware::ver"]
        [::std::mem::offset_of!(drm_amdgpu_info_firmware, ver) - 0usize];
    ["Offset of field: drm_amdgpu_info_firmware::feature"]
        [::std::mem::offset_of!(drm_amdgpu_info_firmware, feature) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vbios {
    pub name: [__u8; 64usize],
    pub vbios_pn: [__u8; 64usize],
    pub version: __u32,
    pub pad: __u32,
    pub vbios_ver_str: [__u8; 32usize],
    pub date: [__u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_vbios"][::std::mem::size_of::<drm_amdgpu_info_vbios>() - 200usize];
    ["Alignment of drm_amdgpu_info_vbios"]
        [::std::mem::align_of::<drm_amdgpu_info_vbios>() - 4usize];
    ["Offset of field: drm_amdgpu_info_vbios::name"]
        [::std::mem::offset_of!(drm_amdgpu_info_vbios, name) - 0usize];
    ["Offset of field: drm_amdgpu_info_vbios::vbios_pn"]
        [::std::mem::offset_of!(drm_amdgpu_info_vbios, vbios_pn) - 64usize];
    ["Offset of field: drm_amdgpu_info_vbios::version"]
        [::std::mem::offset_of!(drm_amdgpu_info_vbios, version) - 128usize];
    ["Offset of field: drm_amdgpu_info_vbios::pad"]
        [::std::mem::offset_of!(drm_amdgpu_info_vbios, pad) - 132usize];
    ["Offset of field: drm_amdgpu_info_vbios::vbios_ver_str"]
        [::std::mem::offset_of!(drm_amdgpu_info_vbios, vbios_ver_str) - 136usize];
    ["Offset of field: drm_amdgpu_info_vbios::date"]
        [::std::mem::offset_of!(drm_amdgpu_info_vbios, date) - 168usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_device {
    pub device_id: __u32,
    pub chip_rev: __u32,
    pub external_rev: __u32,
    pub pci_rev: __u32,
    pub family: __u32,
    pub num_shader_engines: __u32,
    pub num_shader_arrays_per_engine: __u32,
    pub gpu_counter_freq: __u32,
    pub max_engine_clock: __u64,
    pub max_memory_clock: __u64,
    pub cu_active_number: __u32,
    pub cu_ao_mask: __u32,
    pub cu_bitmap: [[__u32; 4usize]; 4usize],
    pub enabled_rb_pipes_mask: __u32,
    pub num_rb_pipes: __u32,
    pub num_hw_gfx_contexts: __u32,
    pub _pad: __u32,
    pub ids_flags: __u64,
    pub virtual_address_offset: __u64,
    pub virtual_address_max: __u64,
    pub virtual_address_alignment: __u32,
    pub pte_fragment_size: __u32,
    pub gart_page_size: __u32,
    pub ce_ram_size: __u32,
    pub vram_type: __u32,
    pub vram_bit_width: __u32,
    pub vce_harvest_config: __u32,
    pub gc_double_offchip_lds_buf: __u32,
    pub prim_buf_gpu_addr: __u64,
    pub pos_buf_gpu_addr: __u64,
    pub cntl_sb_buf_gpu_addr: __u64,
    pub param_buf_gpu_addr: __u64,
    pub prim_buf_size: __u32,
    pub pos_buf_size: __u32,
    pub cntl_sb_buf_size: __u32,
    pub param_buf_size: __u32,
    pub wave_front_size: __u32,
    pub num_shader_visible_vgprs: __u32,
    pub num_cu_per_sh: __u32,
    pub num_tcc_blocks: __u32,
    pub gs_vgt_table_depth: __u32,
    pub gs_prim_buffer_depth: __u32,
    pub max_gs_waves_per_vgt: __u32,
    pub _pad1: __u32,
    pub cu_ao_bitmap: [[__u32; 4usize]; 4usize],
    pub high_va_offset: __u64,
    pub high_va_max: __u64,
    pub pa_sc_tile_steering_override: __u32,
    pub tcc_disabled_mask: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_device"][::std::mem::size_of::<drm_amdgpu_info_device>() - 368usize];
    ["Alignment of drm_amdgpu_info_device"]
        [::std::mem::align_of::<drm_amdgpu_info_device>() - 8usize];
    ["Offset of field: drm_amdgpu_info_device::device_id"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, device_id) - 0usize];
    ["Offset of field: drm_amdgpu_info_device::chip_rev"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, chip_rev) - 4usize];
    ["Offset of field: drm_amdgpu_info_device::external_rev"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, external_rev) - 8usize];
    ["Offset of field: drm_amdgpu_info_device::pci_rev"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, pci_rev) - 12usize];
    ["Offset of field: drm_amdgpu_info_device::family"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, family) - 16usize];
    ["Offset of field: drm_amdgpu_info_device::num_shader_engines"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, num_shader_engines) - 20usize];
    ["Offset of field: drm_amdgpu_info_device::num_shader_arrays_per_engine"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, num_shader_arrays_per_engine) - 24usize];
    ["Offset of field: drm_amdgpu_info_device::gpu_counter_freq"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, gpu_counter_freq) - 28usize];
    ["Offset of field: drm_amdgpu_info_device::max_engine_clock"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, max_engine_clock) - 32usize];
    ["Offset of field: drm_amdgpu_info_device::max_memory_clock"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, max_memory_clock) - 40usize];
    ["Offset of field: drm_amdgpu_info_device::cu_active_number"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, cu_active_number) - 48usize];
    ["Offset of field: drm_amdgpu_info_device::cu_ao_mask"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, cu_ao_mask) - 52usize];
    ["Offset of field: drm_amdgpu_info_device::cu_bitmap"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, cu_bitmap) - 56usize];
    ["Offset of field: drm_amdgpu_info_device::enabled_rb_pipes_mask"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, enabled_rb_pipes_mask) - 120usize];
    ["Offset of field: drm_amdgpu_info_device::num_rb_pipes"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, num_rb_pipes) - 124usize];
    ["Offset of field: drm_amdgpu_info_device::num_hw_gfx_contexts"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, num_hw_gfx_contexts) - 128usize];
    ["Offset of field: drm_amdgpu_info_device::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, _pad) - 132usize];
    ["Offset of field: drm_amdgpu_info_device::ids_flags"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, ids_flags) - 136usize];
    ["Offset of field: drm_amdgpu_info_device::virtual_address_offset"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, virtual_address_offset) - 144usize];
    ["Offset of field: drm_amdgpu_info_device::virtual_address_max"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, virtual_address_max) - 152usize];
    ["Offset of field: drm_amdgpu_info_device::virtual_address_alignment"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, virtual_address_alignment) - 160usize];
    ["Offset of field: drm_amdgpu_info_device::pte_fragment_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, pte_fragment_size) - 164usize];
    ["Offset of field: drm_amdgpu_info_device::gart_page_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, gart_page_size) - 168usize];
    ["Offset of field: drm_amdgpu_info_device::ce_ram_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, ce_ram_size) - 172usize];
    ["Offset of field: drm_amdgpu_info_device::vram_type"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, vram_type) - 176usize];
    ["Offset of field: drm_amdgpu_info_device::vram_bit_width"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, vram_bit_width) - 180usize];
    ["Offset of field: drm_amdgpu_info_device::vce_harvest_config"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, vce_harvest_config) - 184usize];
    ["Offset of field: drm_amdgpu_info_device::gc_double_offchip_lds_buf"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, gc_double_offchip_lds_buf) - 188usize];
    ["Offset of field: drm_amdgpu_info_device::prim_buf_gpu_addr"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, prim_buf_gpu_addr) - 192usize];
    ["Offset of field: drm_amdgpu_info_device::pos_buf_gpu_addr"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, pos_buf_gpu_addr) - 200usize];
    ["Offset of field: drm_amdgpu_info_device::cntl_sb_buf_gpu_addr"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, cntl_sb_buf_gpu_addr) - 208usize];
    ["Offset of field: drm_amdgpu_info_device::param_buf_gpu_addr"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, param_buf_gpu_addr) - 216usize];
    ["Offset of field: drm_amdgpu_info_device::prim_buf_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, prim_buf_size) - 224usize];
    ["Offset of field: drm_amdgpu_info_device::pos_buf_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, pos_buf_size) - 228usize];
    ["Offset of field: drm_amdgpu_info_device::cntl_sb_buf_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, cntl_sb_buf_size) - 232usize];
    ["Offset of field: drm_amdgpu_info_device::param_buf_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, param_buf_size) - 236usize];
    ["Offset of field: drm_amdgpu_info_device::wave_front_size"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, wave_front_size) - 240usize];
    ["Offset of field: drm_amdgpu_info_device::num_shader_visible_vgprs"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, num_shader_visible_vgprs) - 244usize];
    ["Offset of field: drm_amdgpu_info_device::num_cu_per_sh"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, num_cu_per_sh) - 248usize];
    ["Offset of field: drm_amdgpu_info_device::num_tcc_blocks"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, num_tcc_blocks) - 252usize];
    ["Offset of field: drm_amdgpu_info_device::gs_vgt_table_depth"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, gs_vgt_table_depth) - 256usize];
    ["Offset of field: drm_amdgpu_info_device::gs_prim_buffer_depth"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, gs_prim_buffer_depth) - 260usize];
    ["Offset of field: drm_amdgpu_info_device::max_gs_waves_per_vgt"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, max_gs_waves_per_vgt) - 264usize];
    ["Offset of field: drm_amdgpu_info_device::_pad1"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, _pad1) - 268usize];
    ["Offset of field: drm_amdgpu_info_device::cu_ao_bitmap"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, cu_ao_bitmap) - 272usize];
    ["Offset of field: drm_amdgpu_info_device::high_va_offset"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, high_va_offset) - 336usize];
    ["Offset of field: drm_amdgpu_info_device::high_va_max"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, high_va_max) - 344usize];
    ["Offset of field: drm_amdgpu_info_device::pa_sc_tile_steering_override"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, pa_sc_tile_steering_override) - 352usize];
    ["Offset of field: drm_amdgpu_info_device::tcc_disabled_mask"]
        [::std::mem::offset_of!(drm_amdgpu_info_device, tcc_disabled_mask) - 360usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_hw_ip {
    pub hw_ip_version_major: __u32,
    pub hw_ip_version_minor: __u32,
    pub capabilities_flags: __u64,
    pub ib_start_alignment: __u32,
    pub ib_size_alignment: __u32,
    pub available_rings: __u32,
    pub _pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_hw_ip"][::std::mem::size_of::<drm_amdgpu_info_hw_ip>() - 32usize];
    ["Alignment of drm_amdgpu_info_hw_ip"]
        [::std::mem::align_of::<drm_amdgpu_info_hw_ip>() - 8usize];
    ["Offset of field: drm_amdgpu_info_hw_ip::hw_ip_version_major"]
        [::std::mem::offset_of!(drm_amdgpu_info_hw_ip, hw_ip_version_major) - 0usize];
    ["Offset of field: drm_amdgpu_info_hw_ip::hw_ip_version_minor"]
        [::std::mem::offset_of!(drm_amdgpu_info_hw_ip, hw_ip_version_minor) - 4usize];
    ["Offset of field: drm_amdgpu_info_hw_ip::capabilities_flags"]
        [::std::mem::offset_of!(drm_amdgpu_info_hw_ip, capabilities_flags) - 8usize];
    ["Offset of field: drm_amdgpu_info_hw_ip::ib_start_alignment"]
        [::std::mem::offset_of!(drm_amdgpu_info_hw_ip, ib_start_alignment) - 16usize];
    ["Offset of field: drm_amdgpu_info_hw_ip::ib_size_alignment"]
        [::std::mem::offset_of!(drm_amdgpu_info_hw_ip, ib_size_alignment) - 20usize];
    ["Offset of field: drm_amdgpu_info_hw_ip::available_rings"]
        [::std::mem::offset_of!(drm_amdgpu_info_hw_ip, available_rings) - 24usize];
    ["Offset of field: drm_amdgpu_info_hw_ip::_pad"]
        [::std::mem::offset_of!(drm_amdgpu_info_hw_ip, _pad) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_num_handles {
    pub uvd_max_handles: __u32,
    pub uvd_used_handles: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_num_handles"]
        [::std::mem::size_of::<drm_amdgpu_info_num_handles>() - 8usize];
    ["Alignment of drm_amdgpu_info_num_handles"]
        [::std::mem::align_of::<drm_amdgpu_info_num_handles>() - 4usize];
    ["Offset of field: drm_amdgpu_info_num_handles::uvd_max_handles"]
        [::std::mem::offset_of!(drm_amdgpu_info_num_handles, uvd_max_handles) - 0usize];
    ["Offset of field: drm_amdgpu_info_num_handles::uvd_used_handles"]
        [::std::mem::offset_of!(drm_amdgpu_info_num_handles, uvd_used_handles) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vce_clock_table_entry {
    pub sclk: __u32,
    pub mclk: __u32,
    pub eclk: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_vce_clock_table_entry"]
        [::std::mem::size_of::<drm_amdgpu_info_vce_clock_table_entry>() - 16usize];
    ["Alignment of drm_amdgpu_info_vce_clock_table_entry"]
        [::std::mem::align_of::<drm_amdgpu_info_vce_clock_table_entry>() - 4usize];
    ["Offset of field: drm_amdgpu_info_vce_clock_table_entry::sclk"]
        [::std::mem::offset_of!(drm_amdgpu_info_vce_clock_table_entry, sclk) - 0usize];
    ["Offset of field: drm_amdgpu_info_vce_clock_table_entry::mclk"]
        [::std::mem::offset_of!(drm_amdgpu_info_vce_clock_table_entry, mclk) - 4usize];
    ["Offset of field: drm_amdgpu_info_vce_clock_table_entry::eclk"]
        [::std::mem::offset_of!(drm_amdgpu_info_vce_clock_table_entry, eclk) - 8usize];
    ["Offset of field: drm_amdgpu_info_vce_clock_table_entry::pad"]
        [::std::mem::offset_of!(drm_amdgpu_info_vce_clock_table_entry, pad) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_vce_clock_table {
    pub entries: [drm_amdgpu_info_vce_clock_table_entry; 6usize],
    pub num_valid_entries: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_vce_clock_table"]
        [::std::mem::size_of::<drm_amdgpu_info_vce_clock_table>() - 104usize];
    ["Alignment of drm_amdgpu_info_vce_clock_table"]
        [::std::mem::align_of::<drm_amdgpu_info_vce_clock_table>() - 4usize];
    ["Offset of field: drm_amdgpu_info_vce_clock_table::entries"]
        [::std::mem::offset_of!(drm_amdgpu_info_vce_clock_table, entries) - 0usize];
    ["Offset of field: drm_amdgpu_info_vce_clock_table::num_valid_entries"]
        [::std::mem::offset_of!(drm_amdgpu_info_vce_clock_table, num_valid_entries) - 96usize];
    ["Offset of field: drm_amdgpu_info_vce_clock_table::pad"]
        [::std::mem::offset_of!(drm_amdgpu_info_vce_clock_table, pad) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_video_codec_info {
    pub valid: __u32,
    pub max_width: __u32,
    pub max_height: __u32,
    pub max_pixels_per_frame: __u32,
    pub max_level: __u32,
    pub pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_video_codec_info"]
        [::std::mem::size_of::<drm_amdgpu_info_video_codec_info>() - 24usize];
    ["Alignment of drm_amdgpu_info_video_codec_info"]
        [::std::mem::align_of::<drm_amdgpu_info_video_codec_info>() - 4usize];
    ["Offset of field: drm_amdgpu_info_video_codec_info::valid"]
        [::std::mem::offset_of!(drm_amdgpu_info_video_codec_info, valid) - 0usize];
    ["Offset of field: drm_amdgpu_info_video_codec_info::max_width"]
        [::std::mem::offset_of!(drm_amdgpu_info_video_codec_info, max_width) - 4usize];
    ["Offset of field: drm_amdgpu_info_video_codec_info::max_height"]
        [::std::mem::offset_of!(drm_amdgpu_info_video_codec_info, max_height) - 8usize];
    ["Offset of field: drm_amdgpu_info_video_codec_info::max_pixels_per_frame"]
        [::std::mem::offset_of!(drm_amdgpu_info_video_codec_info, max_pixels_per_frame) - 12usize];
    ["Offset of field: drm_amdgpu_info_video_codec_info::max_level"]
        [::std::mem::offset_of!(drm_amdgpu_info_video_codec_info, max_level) - 16usize];
    ["Offset of field: drm_amdgpu_info_video_codec_info::pad"]
        [::std::mem::offset_of!(drm_amdgpu_info_video_codec_info, pad) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_amdgpu_info_video_caps {
    pub codec_info: [drm_amdgpu_info_video_codec_info; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drm_amdgpu_info_video_caps"]
        [::std::mem::size_of::<drm_amdgpu_info_video_caps>() - 192usize];
    ["Alignment of drm_amdgpu_info_video_caps"]
        [::std::mem::align_of::<drm_amdgpu_info_video_caps>() - 4usize];
    ["Offset of field: drm_amdgpu_info_video_caps::codec_info"]
        [::std::mem::offset_of!(drm_amdgpu_info_video_caps, codec_info) - 0usize];
};
